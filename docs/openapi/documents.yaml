openapi: 3.0.3
info:
  title: FUEP Post-UTME Portal - Documents Management API
  version: '2.0.0'
  description: |
    Document upload, storage, and management endpoints.

    This API has been significantly simplified and optimized:
    - Streamlined document upload and storage
    - Enhanced MinIO integration for scalable storage
    - Simplified document retrieval and management
    - Cleaner interfaces and improved performance

paths:
  # Document upload
  /api/documents/upload:
    post:
      summary: Upload a document
      tags: [Documents]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [file, candidateId, documentType]
              properties:
                file:
                  type: string
                  format: binary
                  description: Document file to upload
                candidateId:
                  type: string
                  format: uuid
                  description: ID of the candidate uploading the document
                documentType:
                  type: string
                  enum: ['passport_photo', 'signature', 'certificate', 'transcript', 'other']
                  description: Type of document being uploaded
                description:
                  type: string
                  description: Optional description of the document
      responses:
        '201':
          description: Document uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentUploadResponse'
        '400': { description: Invalid file or metadata }
        '413': { description: File too large }

  # Document retrieval
  /api/documents/{documentId}:
    get:
      summary: Get document metadata
      tags: [Documents]
      parameters:
        - in: path
          name: documentId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Document metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentMetadataResponse'
        '404': { description: Document not found }

    delete:
      summary: Delete document
      tags: [Documents]
      parameters:
        - in: path
          name: documentId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Document deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentDeleteResponse'
        '404': { description: Document not found }

  # Document download
  /api/documents/{documentId}/download:
    get:
      summary: Download document
      tags: [Documents]
      parameters:
        - in: path
          name: documentId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Document file
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404': { description: Document not found }

  # Secure download URL
  /api/documents/{documentId}/secure-url:
    get:
      summary: Get secure download URL
      tags: [Documents]
      parameters:
        - in: path
          name: documentId
          required: true
          schema: { type: string, format: uuid }
        - in: query
          name: expiresIn
          schema: { type: integer, default: 3600 }
          description: URL expiration time in seconds
      responses:
        '200':
          description: Secure download URL
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecureUrlResponse'
        '404': { description: Document not found }

  # Candidate documents
  /api/documents/candidate/{candidateId}:
    get:
      summary: Get all documents for a candidate
      tags: [Documents]
      parameters:
        - in: path
          name: candidateId
          required: true
          schema: { type: string, format: uuid }
        - in: query
          name: documentType
          schema: { type: string }
          description: Filter by document type
      responses:
        '200':
          description: List of candidate documents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateDocumentsResponse'
        '404': { description: Candidate not found }

  # Document health status
  /api/documents/health/status:
    get:
      summary: Get documents service health status
      tags: [Documents]
      responses:
        '200':
          description: Service health status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentsHealthResponse'

  # Document scan status update
  /api/documents/{documentId}/scan-status:
    post:
      summary: Update document scan status
      tags: [Documents]
      parameters:
        - in: path
          name: documentId
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [scanStatus]
              properties:
                scanStatus: { type: string, enum: ['pending', 'scanning', 'completed', 'failed'] }
                scanNotes: { type: string }
                scannedAt: { type: string, format: date-time }
      responses:
        '200':
          description: Scan status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanStatusUpdateResponse'
        '404': { description: Document not found }

components:
  schemas:
    Document:
      type: object
      properties:
        id: { type: string, format: uuid }
        candidateId: { type: string, format: uuid }
        filename: { type: string, maxLength: 255 }
        originalName: { type: string, maxLength: 255 }
        documentType:
          {
            type: string,
            enum: ['passport_photo', 'signature', 'certificate', 'transcript', 'other'],
          }
        mimeType: { type: string, maxLength: 100 }
        size: { type: integer }
        description: { type: string }
        bucketName: { type: string, maxLength: 100 }
        objectKey: { type: string, maxLength: 500 }
        scanStatus: { type: string, enum: ['pending', 'scanning', 'completed', 'failed'] }
        scanNotes: { type: string }
        scannedAt: { type: string, format: date-time }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    DocumentUploadResponse:
      type: object
      properties:
        success: { type: boolean }
        data: { $ref: '#/components/schemas/Document' }
        message: { type: string }
        timestamp: { type: string, format: date-time }

    DocumentMetadataResponse:
      type: object
      properties:
        success: { type: boolean }
        data: { $ref: '#/components/schemas/Document' }
        timestamp: { type: string, format: date-time }

    DocumentDeleteResponse:
      type: object
      properties:
        success: { type: boolean }
        message: { type: string }
        timestamp: { type: string, format: date-time }

    SecureUrlResponse:
      type: object
      properties:
        success: { type: boolean }
        data:
          type: object
          properties:
            secureUrl: { type: string, format: uri }
            expiresAt: { type: string, format: date-time }
            documentId: { type: string, format: uuid }
        timestamp: { type: string, format: date-time }

    CandidateDocumentsResponse:
      type: object
      properties:
        success: { type: boolean }
        data:
          type: array
          items: { $ref: '#/components/schemas/Document' }
        timestamp: { type: string, format: date-time }

    DocumentsHealthResponse:
      type: object
      properties:
        success: { type: boolean }
        data:
          type: object
          properties:
            status: { type: string, enum: ['healthy', 'degraded', 'unhealthy'] }
            minioStatus: { type: string, enum: ['online', 'offline'] }
            storageUsage: { type: object }
            lastCheck: { type: string, format: date-time }
        timestamp: { type: string, format: date-time }

    ScanStatusUpdateResponse:
      type: object
      properties:
        success: { type: boolean }
        data: { $ref: '#/components/schemas/Document' }
        message: { type: string }
        timestamp: { type: string, format: date-time }

tags:
  - name: Documents
    description: Document upload, storage, and management endpoints
