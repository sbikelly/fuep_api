openapi: 3.0.3
info:
  title: FUEP Post-UTME Portal - Document Management API
  version: '1.0.0'
  description: Document upload, storage, and management endpoints

paths:
  /api/documents/upload:
    post:
      summary: Upload a document
      tags: [Documents]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [type, file]
              properties:
                type: { $ref: '#/components/schemas/UploadType' }
                file:
                  type: string
                  format: binary
                candidateId: { type: string, format: uuid }
                description: { type: string }
      responses:
        '201':
          description: Document uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/Upload' }
                  message: { type: string }
                  timestamp: { type: string, format: date-time }
        '400': { description: Invalid file or missing required fields }
        '413': { description: File too large' }

  /api/documents/{documentId}:
    get:
      summary: Get document details
      tags: [Documents]
      parameters:
        - in: path
          name: documentId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Document details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/Upload' }
                  timestamp: { type: string, format: date-time }
        '404': { description: Document not found }

  /api/documents/candidate/{candidateId}:
    get:
      summary: Get all documents for a candidate
      tags: [Documents]
      parameters:
        - in: path
          name: candidateId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: List of candidate documents
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Upload' }
                  timestamp: { type: string, format: date-time }

  /api/documents/{documentId}/download:
    get:
      summary: Download document
      tags: [Documents]
      parameters:
        - in: path
          name: documentId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Document file
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404': { description: Document not found }

  /api/documents/{documentId}/secure-url:
    get:
      summary: Get secure download URL for document
      tags: [Documents]
      parameters:
        - in: path
          name: documentId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Secure download URL
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: object
                    properties:
                      downloadUrl: { type: string, format: uri }
                      expiresAt: { type: string, format: date-time }
                  timestamp: { type: string, format: date-time }

  /api/documents/{documentId}:
    delete:
      summary: Delete document
      tags: [Documents]
      parameters:
        - in: path
          name: documentId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Document deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
                  timestamp: { type: string, format: date-time }
        '404': { description: Document not found }

  /api/documents/health/status:
    get:
      summary: Get document service health status
      tags: [Documents]
      responses:
        '200':
          description: Health status
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: object
                    properties:
                      status: { type: string }
                      storage: { type: string }
                      scanService: { type: string }
                      timestamp: { type: string, format: date-time }

  /api/documents/{documentId}/scan-status:
    post:
      summary: Update document scan status
      tags: [Documents]
      parameters:
        - in: path
          name: documentId
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [scanStatus]
              properties:
                scanStatus: { $ref: '#/components/schemas/ScanStatus' }
                scanNotes: { type: string }
                scannedAt: { type: string, format: date-time }
      responses:
        '200':
          description: Scan status updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
                  timestamp: { type: string, format: date-time }

components:
  schemas:
    UploadType:
      type: string
      enum: ['passport', 'ssce', 'alevel', 'transcript', 'utme_result', 'other']

    ScanStatus:
      type: string
      enum: ['pending', 'clean', 'infected', 'failed']

    Upload:
      type: object
      properties:
        id: { type: string, format: uuid }
        candidateId: { type: string, format: uuid }
        type: { $ref: '#/components/schemas/UploadType' }
        s3Url: { type: string }
        checksumSha256: { type: string }
        sizeBytes: { type: integer }
        mimeType: { type: string }
        scanStatus: { $ref: '#/components/schemas/ScanStatus' }
        description: { type: string }
        uploadedAt: { type: string, format: date-time }
        scannedAt: { type: string, format: date-time }
        createdAt: { type: string, format: date-time }

    DocumentUploadRequest:
      type: object
      properties:
        type: { $ref: '#/components/schemas/UploadType' }
        candidateId: { type: string, format: uuid }
        description: { type: string }

    DocumentUploadResponse:
      type: object
      properties:
        success: { type: boolean }
        data: { $ref: '#/components/schemas/Upload' }
        message: { type: string }
        timestamp: { type: string, format: date-time }

    DocumentScanUpdate:
      type: object
      properties:
        scanStatus: { $ref: '#/components/schemas/ScanStatus' }
        scanNotes: { type: string }
        scannedAt: { type: string, format: date-time }

    DocumentHealthStatus:
      type: object
      properties:
        status: { type: string }
        storage: { type: string }
        scanService: { type: string }
        timestamp: { type: string, format: date-time }
