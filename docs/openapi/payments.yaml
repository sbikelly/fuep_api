openapi: 3.0.3
info:
  title: FUEP Post-UTME Portal - Simplified Payment Management API
  version: '2.0.0'
  description: |
    Payment processing, verification, and management endpoints.

    This API has been significantly simplified and optimized:
    - Direct Remita integration eliminating provider complexity
    - Simplified payment purpose management
    - Streamlined payment flow and verification
    - Enhanced webhook handling and status updates
    - Cleaner interfaces and improved performance
    - Removed the document upload endpoints as they are not needed for the simplified API

paths:
  # Payment initiation
  /api/payments/initiate:
    post:
      summary: Initiate Payment by generating RRR
      tags: [Payments]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [candidateId, PaymentPurpose]
      responses:
        '201':
          description: Payment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentInitiationResponse'
        '400': { description: Invalid payment data }
        '500': { description: Payment initiation failed }

  # Payment purposes
  /api/payments/purposes:
    get:
      summary: Get all payment purposes
      tags: [Payments]
      responses:
        '200':
          description: List of payment purposes
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/PaymentPurpose' }
                  timestamp: { type: string, format: date-time }

  # Provider status
  /api/payments/providers/status:
    get:
      summary: Get payment provider status
      tags: [Payments]
      responses:
        '200':
          description: Provider status information
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/ProviderStatus' }
                  timestamp: { type: string, format: date-time }

  # Payment statistics
  /api/payments/statistics:
    get:
      summary: Get payment statistics
      tags: [Payments]
      responses:
        '200':
          description: Payment statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/PaymentStatistics' }
                  timestamp: { type: string, format: date-time }

  # Candidate payment history
  /api/payments/candidate/{candidateId}/history:
    get:
      summary: Get candidate payment history
      tags: [Payments]
      parameters:
        - in: path
          name: candidateId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Candidate payment history
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/PaymentTransaction' }
                  timestamp: { type: string, format: date-time }

  # Webhook endpoints
  /api/payments/webhook/remita:
    post:
      summary: Remita webhook callback
      tags: [Payments]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RemitaWebhookPayload' }
      responses:
        '200':
          description: Webhook processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
                  timestamp: { type: string, format: date-time }

  # Payment status and details
  /api/payments/{paymentId}:
    get:
      summary: Get payment status and details
      tags: [Payments]
      parameters:
        - in: path
          name: paymentId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Payment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentStatusCheckResponse'
        '404': { description: Payment not found }

  # RRR Verification
  /api/payments/verify/{rrr}:
    get:
      summary: Verify RRR
      tags: [Payments]
      parameters:
        - in: path
          name: rrr
          required: true
          schema: { type: string, maxLength: 100 }
      responses:
        '200':
          description: RRR verification result
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }

  # Payment verification
  /api/payments/{paymentId}/verify:
    post:
      summary: Manually verify payment with provider
      tags: [Payments]
      parameters:
        - in: path
          name: paymentId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Payment verification result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentVerificationResponse'
        '404': { description: Payment not found }

  # Payment receipt
  /api/payments/{paymentId}/receipt:
    get:
      summary: Get payment receipt
      tags: [Payments]
      parameters:
        - in: path
          name: paymentId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Payment receipt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentReceiptResponse'
        '400': { description: Payment not successful' }
        '404': { description: Payment not found }

components:
  schemas:
    PaymentPurpose:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string, maxLength: 100 }
        purpose: { type: string, maxLength: 50 }
        description: { type: string }
        amount: { type: number, format: float }
        isActive: { type: boolean }
        session: { type: string, maxLength: 16 }
        level: { type: string, maxLength: 10 }
        createdBy: { type: string, format: uuid }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    PaymentTransaction:
      type: object
      properties:
        id: { type: string, format: uuid }
        candidateId: { type: string, format: uuid }
        purposeId: { type: string, format: uuid }
        amount: { type: number, format: float }
        status: { type: string, enum: ['pending', 'paid', 'failed', 'refunded'] }
        rrr: { type: string, maxLength: 100 }
        provider: { type: string, default: 'remita' }
        providerReference: { type: string }
        metadata: { type: object }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    PaymentInitiationRequest:
      type: object
      required: [purposeId, amount, session, email, phone, jambRegNo]
      properties:
        purposeId: { type: string, format: uuid }
        amount: { type: number, format: float }
        session: { type: string, maxLength: 16 }
        email: { type: string, format: email }
        phone: { type: string, maxLength: 32 }
        jambRegNo: { type: string, maxLength: 20 }

    PaymentInitiationResponse:
      type: object
      properties:
        success: { type: boolean }
        data:
          type: object
          properties:
            paymentId: { type: string, format: uuid }
            rrr: { type: string, maxLength: 100 }
            amount: { type: number, format: float }
            status: { type: string, enum: ['pending'] }
            redirectUrl: { type: string }
            message: { type: string }
        timestamp: { type: string, format: date-time }

    PaymentStatusCheckResponse:
      type: object
      properties:
        success: { type: boolean }
        data:
          type: object
          properties:
            paymentId: { type: string, format: uuid }
            status: { type: string, enum: ['pending', 'paid', 'failed', 'refunded'] }
            amount: { type: number, format: float }
            rrr: { type: string, maxLength: 100 }
            provider: { type: string }
            providerReference: { type: string }
            metadata: { type: object }
            createdAt: { type: string, format: date-time }
            updatedAt: { type: string, format: date-time }
        timestamp: { type: string, format: date-time }

    PaymentVerificationResponse:
      type: object
      properties:
        success: { type: boolean }
        data:
          type: object
          properties:
            paymentId: { type: string, format: uuid }
            status: { type: string, enum: ['pending', 'paid', 'failed', 'refunded'] }
            verified: { type: boolean }
            verificationTime: { type: string, format: date-time }
            message: { type: string }
        timestamp: { type: string, format: date-time }

    PaymentReceiptResponse:
      type: object
      properties:
        success: { type: boolean }
        data:
          type: object
          properties:
            paymentId: { type: string, format: uuid }
            receiptNumber: { type: string }
            amount: { type: number, format: float }
            status: { type: string, enum: ['paid'] }
            paidAt: { type: string, format: date-time }
            rrr: { type: string, maxLength: 100 }
            purpose: { $ref: '#/components/schemas/PaymentPurpose' }
            candidate: { $ref: '#/components/schemas/CandidateSummary' }
        timestamp: { type: string, format: date-time }

    RemitaWebhookPayload:
      type: object
      properties:
        rrr: { type: string, maxLength: 100 }
        status: { type: string, enum: ['success', 'failed', 'pending'] }
        amount: { type: number, format: float }
        transactionId: { type: string }
        paymentDate: { type: string, format: date-time }
        channel: { type: string }
        narration: { type: string }
        signature: { type: string }

    ProviderStatus:
      type: object
      properties:
        remita:
          type: object
          properties:
            status: { type: string, enum: ['online', 'offline', 'maintenance'] }
            lastCheck: { type: string, format: date-time }
            responseTime: { type: number }

    PaymentStatistics:
      type: object
      properties:
        totalPayments: { type: integer }
        totalAmount: { type: number, format: float }
        successfulPayments: { type: integer }
        failedPayments: { type: integer }
        pendingPayments: { type: integer }
        averageAmount: { type: number, format: float }
        topPurposes:
          type: array
          items:
            type: object
            properties:
              purpose: { type: string }
              count: { type: integer }
              totalAmount: { type: number, format: float }

    CandidateSummary:
      type: object
      properties:
        id: { type: string, format: uuid }
        jambRegNo: { type: string, maxLength: 20 }
        firstname: { type: string, maxLength: 100 }
        surname: { type: string, maxLength: 100 }
        email: { type: string, format: email }

tags:
  - name: Payments
    description: Payment processing, verification, and management endpoints
