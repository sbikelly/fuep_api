openapi: 3.0.3
info:
  title: FUEP Post-UTME Portal - Admin Management API
  version: '1.0.0'
  description: Administrative functions, user management, and system administration endpoints

paths:
  /api/admin/auth/login:
    post:
      summary: Admin user login
      tags: [Admin]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username: { type: string }
                password: { type: string, format: password }
      responses:
        '200':
          description: Admin authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminLoginResponse'
        '401': { description: Invalid credentials }

  /api/admin/auth/refresh:
    post:
      summary: Refresh admin access token
      tags: [Admin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refreshToken]
              properties:
                refreshToken: { type: string }
      responses:
        '200':
          description: New access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminAuthTokens'

  /api/admin/users:
    get:
      summary: Get all admin users
      tags: [Admin]
      responses:
        '200':
          description: List of admin users
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/AdminUser' }
                  timestamp: { type: string, format: date-time }

  /api/admin/users/{id}:
    get:
      summary: Get admin user by ID
      tags: [Admin]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Admin user details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/AdminUser' }
                  timestamp: { type: string, format: date-time }

  /api/admin/dashboard:
    get:
      summary: Get admin dashboard summary
      tags: [Admin]
      responses:
        '200':
          description: Dashboard summary data
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/AdminDashboardSummary' }
                  timestamp: { type: string, format: date-time }

  /api/admin/analytics:
    get:
      summary: Get system analytics
      tags: [Admin]
      responses:
        '200':
          description: Analytics data
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/AdminAnalytics' }
                  timestamp: { type: string, format: date-time }

  /api/admin/candidates:
    get:
      summary: Get all candidates
      tags: [Admin]
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 20 }
        - in: query
          name: status
          schema: { type: string }
      responses:
        '200':
          description: List of candidates
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/CandidateAdminView' }
                  pagination:
                    type: object
                    properties:
                      page: { type: integer }
                      limit: { type: integer }
                      total: { type: integer }
                      pages: { type: integer }
                  timestamp: { type: string, format: date-time }

  /api/admin/candidates/{id}:
    get:
      summary: Get candidate by ID
      tags: [Admin]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Candidate details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/CandidateAdminView' }
                  timestamp: { type: string, format: date-time }

  /api/admin/candidates/{id}/status:
    put:
      summary: Update candidate status
      tags: [Admin]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status: { type: string }
                notes: { type: string }
      responses:
        '200':
          description: Status updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
                  timestamp: { type: string, format: date-time }

  /api/admin/payments:
    get:
      summary: Get all payments
      tags: [Admin]
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 20 }
        - in: query
          name: status
          schema: { type: string }
        - in: query
          name: provider
          schema: { type: string }
      responses:
        '200':
          description: List of payments
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/PaymentAdminView' }
                  pagination:
                    type: object
                    properties:
                      page: { type: integer }
                      limit: { type: integer }
                      total: { type: integer }
                      pages: { type: integer }
                  timestamp: { type: string, format: date-time }

  /api/admin/payments/reconciliation:
    get:
      summary: Get payment reconciliation data
      tags: [Admin]
      responses:
        '200':
          description: Reconciliation data
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/PaymentReconciliation' }
                  timestamp: { type: string, format: date-time }

  /api/admin/admissions:
    get:
      summary: Get all admission decisions
      tags: [Admin]
      responses:
        '200':
          description: List of admission decisions
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/AdmissionDecision' }
                  timestamp: { type: string, format: date-time }

  /api/admin/admissions/batch:
    post:
      summary: Process batch admission decisions
      tags: [Admin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [decisions]
              properties:
                decisions:
                  type: array
                  items:
                    type: object
                    properties:
                      candidateId: { type: string, format: uuid }
                      decision: { type: string, enum: ['admitted', 'rejected'] }
                      notes: { type: string }
      responses:
        '200':
          description: Batch processing initiated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
                  batchId: { type: string, format: uuid }
                  timestamp: { type: string, format: date-time }

  /api/admin/prelist/upload:
    post:
      summary: Upload JAMB prelist
      tags: [Admin]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [file, session]
              properties:
                file:
                  type: string
                  format: binary
                session: { type: string }
      responses:
        '201':
          description: Prelist upload initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrelistUploadResponse'

  /api/admin/prelist/batches:
    get:
      summary: Get prelist upload batches
      tags: [Admin]
      responses:
        '200':
          description: List of upload batches
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/PrelistBatch' }
                  timestamp: { type: string, format: date-time }

  /api/admin/reports/generate:
    post:
      summary: Generate report
      tags: [Admin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [reportType]
              properties:
                reportType: { type: string }
                parameters: { type: object }
      responses:
        '202':
          description: Report generation initiated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
                  jobId: { type: string, format: uuid }
                  timestamp: { type: string, format: date-time }

  /api/admin/reports/jobs/{jobId}:
    get:
      summary: Get report job status
      tags: [Admin]
      parameters:
        - in: path
          name: jobId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Report job status
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/ReportJob' }
                  timestamp: { type: string, format: date-time }

  /api/admin/health:
    get:
      summary: Get admin module health status
      tags: [Admin]
      responses:
        '200':
          description: Health status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminHealthStatus'

components:
  schemas:
    AdminUser:
      type: object
      properties:
        id: { type: string, format: uuid }
        username: { type: string }
        email: { type: string }
        role: { $ref: '#/components/schemas/AdminRole' }
        isActive: { type: boolean }
        lastLoginAt: { type: string, format: date-time }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    AdminRole:
      type: string
      enum: ['super_admin', 'admissions_officer', 'finance_officer', 'registrar', 'viewer', 'data_analyst']

    AdminLoginResponse:
      type: object
      properties:
        success: { type: boolean }
        data: { $ref: '#/components/schemas/AdminAuthTokens' }
        user: { $ref: '#/components/schemas/AdminUser' }
        timestamp: { type: string, format: date-time }

    AdminAuthTokens:
      type: object
      properties:
        accessToken: { type: string }
        refreshToken: { type: string }
        expiresIn: { type: integer }
        tokenType: { type: string }

    AdminDashboardSummary:
      type: object
      properties:
        totalCandidates: { type: integer }
        pendingApplications: { type: integer }
        totalPayments: { type: integer }
        totalAdmissions: { type: integer }
        recentActivity:
          type: array
          items:
            type: object
            properties:
              action: { type: string }
              timestamp: { type: string, format: date-time }
              adminUser: { type: string }

    AdminAnalytics:
      type: object
      properties:
        candidatesByStatus:
          type: object
          additionalProperties: { type: integer }
        paymentsByMonth:
          type: object
          additionalProperties: { type: number }
        admissionsByProgram:
          type: object
          additionalProperties: { type: integer }
        applicationTrends:
          type: array
          items:
            type: object
            properties:
              date: { type: string, format: date }
              applications: { type: integer }
              payments: { type: integer }
        topPerformingPrograms:
          type: array
          items:
            type: object
            properties:
              program: { type: string }
              applications: { type: integer }
              conversionRate: { type: number }

    CandidateAdminView:
      type: object
      properties:
        id: { type: string, format: uuid }
        jambRegNo: { type: string }
        username: { type: string }
        email: { type: string }
        phone: { type: string }
        isActive: { type: boolean }
        tempPasswordFlag: { type: boolean }
        createdAt: { type: string, format: date-time }
        surname: { type: string }
        firstname: { type: string }
        othernames: { type: string }
        gender: { type: string }
        state: { type: string }
        lga: { type: string }
        applicationStatus: { type: string }
        session: { type: string }
        programmeCode: { type: string }
        departmentCode: { type: string }
        admissionDecision: { type: string }
        matricNo: { type: string }
        documentCount: { type: integer }
        successfulPaymentsCount: { type: integer }

    PaymentAdminView:
      type: object
      properties:
        id: { type: string, format: uuid }
        candidateId: { type: string, format: uuid }
        purpose: { type: string }
        provider: { type: string }
        amount: { type: number }
        currency: { type: string }
        status: { type: string }
        createdAt: { type: string, format: date-time }
        candidateJambRegNo: { type: string }
        candidateEmail: { type: string }

    PaymentReconciliation:
      type: object
      properties:
        totalPayments: { type: integer }
        successfulPayments: { type: integer }
        failedPayments: { type: integer }
        pendingPayments: { type: integer }
        totalAmount: { type: number }
        reconciledAmount: { type: number }
        disputedAmount: { type: number }
        reconciliationRate: { type: number }

    AdmissionDecision:
      type: object
      properties:
        id: { type: string, format: uuid }
        jambRegNo: { type: string }
        decision: { type: string, enum: ['pending', 'admitted', 'rejected'] }
        notes: { type: string }
        decidedBy: { type: string, format: uuid }
        decidedAt: { type: string, format: date-time }

    PrelistBatch:
      type: object
      properties:
        id: { type: string, format: uuid }
        filename: { type: string }
        totalRecords: { type: integer }
        processedRecords: { type: integer }
        failedRecords: { type: integer }
        status: { type: string, enum: ['processing', 'completed', 'failed'] }
        uploadedBy: { type: string, format: uuid }
        uploadedAt: { type: string, format: date-time }
        completedAt: { type: string, format: date-time }

    PrelistUploadResponse:
      type: object
      properties:
        batchId: { type: string, format: uuid }
        filename: { type: string }
        totalRecords: { type: integer }
        status: { type: string }
        message: { type: string }

    ReportJob:
      type: object
      properties:
        id: { type: string, format: uuid }
        type: { type: string }
        parameters: { type: object }
        status: { type: string, enum: ['queued', 'processing', 'completed', 'failed'] }
        fileUrl: { type: string }
        errorMessage: { type: string }
        createdBy: { type: string, format: uuid }
        createdAt: { type: string, format: date-time }
        completedAt: { type: string, format: date-time }

    AdminHealthStatus:
      type: object
      properties:
        success: { type: boolean }
        data:
          type: object
          properties:
            module: { type: string }
            status: { type: string }
            timestamp: { type: string, format: date-time }
            version: { type: string }
