openapi: 3.0.3
info:
  title: FUEP Post-UTME Portal - Simplified Admin Management API
  version: '2.0.0'
  description: |
    Administrative functions, user management, and system administration endpoints.

    This API has been significantly simplified and optimized:
    - Streamlined candidate management operations
    - Unified admin-candidate integration
    - Simplified payment purpose management
    - Enhanced analytics and reporting capabilities
    - Cleaner interfaces and improved performance
    - Removed the document upload endpoints as they are not needed for the simplified API

paths:
  # Admin authentication
  /api/admin/auth/login:
    post:
      summary: Admin user login
      tags: [Admin]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username: { type: string }
                password: { type: string, format: password }
      responses:
        '200':
          description: Admin authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminLoginResponse'
        '401': { description: Invalid credentials }

  /api/admin/auth/refresh:
    post:
      summary: Refresh admin access token
      tags: [Admin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refreshToken]
              properties:
                refreshToken: { type: string }
      responses:
        '200':
          description: New access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminAuthTokens'

  # Candidate batch upload management
  /api/admin/batch-upload/upload:
    post:
      summary: Upload candidate batch from Excel file
      tags: [Admin]
      description: |
        Upload candidates in batch using CSV or Excel file. The frontend should extract file content and send as base64 data.

        **Important**: Passwords are NOT created during batch upload. Candidates are created with `password_hash` set to `null`.
        Passwords are only created when candidates initiate registration by entering their JAMB number on the application page.

        This allows the system to distinguish between candidates who have been uploaded but not yet initiated registration.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [fileData, fileName]
              properties:
                fileData:
                  type: string
                  description: Base64 encoded Excel file content
                fileName:
                  type: string
                  description: Name of the uploaded file
      responses:
        '200':
          description: Batch upload completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
                  data:
                    type: object
                    properties:
                      total: { type: integer }
                      created: { type: integer }
                      updated: { type: integer }
                      errors:
                        type: array
                        items: { type: string }
        '400':
          description: Invalid file data or processing error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  error: { type: string }
                  data:
                    type: object
                    properties:
                      total: { type: integer }
                      created: { type: integer }
                      updated: { type: integer }
                      errors:
                        type: array
                        items: { type: string }

  /api/admin/batch-upload/stats:
    get:
      summary: Get batch upload statistics
      tags: [Admin]
      description: Get statistics about candidate batch uploads
      responses:
        '200':
          description: Batch upload statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: object
                    properties:
                      total_candidates: { type: string }
                      pending_registration: { type: string }
                      completed_registration: { type: string }
                      active_candidates: { type: string }
                      first_time_logins: { type: string }

  /api/admin/batch-upload/template/{type}:
    get:
      summary: Download candidate batch upload template
      tags: [Admin]
      description: Get template for UTME or DE candidates
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
            enum: [utme, de]
          description: Template type (UTME or DE)
      responses:
        '200':
          description: Template information
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
                  templatePath: { type: string }

  # Admin candidate management
  /api/admin/candidates:
    post:
      summary: Create a new candidate
      tags: [Admin]
      description: |
        Create a new candidate in the system. This endpoint is used by administrators to manually add candidates.

        **Authentication Required:**
        - Admin user must be authenticated via Bearer token in Authorization header
        - Admin user ID will be extracted from the JWT token

        **For Testing (when auth middleware is disabled):**
        - You can include `adminUserId` in the request body as a fallback

        **Required fields:**
        - jambRegNo: JAMB registration number (must be unique)
        - firstname: Candidate's first name
        - surname: Candidate's surname
        - departmentId: UUID of the department
        - modeOfEntry: Either 'UTME' or 'DE'

        **Optional fields:**
        - othernames: Middle name or other names
        - email: Email address
        - phone: Phone number
        - gender: 'male', 'female', or 'other'
        - department: Department name (for backward compatibility)
        - adminUserId: Admin user ID (for testing when auth is disabled)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [jambRegNo, firstname, surname, departmentId, modeOfEntry]
              properties:
                jambRegNo:
                  type: string
                  maxLength: 20
                  description: JAMB registration number (must be unique)
                firstname:
                  type: string
                  maxLength: 100
                  description: Candidate's first name
                surname:
                  type: string
                  maxLength: 100
                  description: Candidate's surname
                othernames:
                  type: string
                  maxLength: 100
                  description: Middle name or other names
                email:
                  type: string
                  format: email
                  maxLength: 160
                  description: Email address
                phone:
                  type: string
                  maxLength: 32
                  description: Phone number
                gender:
                  type: string
                  enum: [male, female, other]
                  default: other
                  description: Gender
                departmentId:
                  type: string
                  format: uuid
                  description: UUID of the department
                department:
                  type: string
                  maxLength: 100
                  description: Department name (for backward compatibility)
                modeOfEntry:
                  type: string
                  enum: [UTME, DE]
                  description: Mode of entry
                adminUserId:
                  type: string
                  format: uuid
                  description: Admin user ID (for testing when authentication middleware is disabled)
      responses:
        '201':
          description: Candidate created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/Candidate' }
                  message: { type: string }
                  timestamp: { type: string, format: date-time }
        '400':
          description: Bad request - validation error or duplicate JAMB number
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  error: { type: string }
        '401':
          description: Unauthorized - admin user not authenticated
        '409':
          description: Conflict - JAMB registration number already exists

    get:
      summary: Get all candidates with pagination and filters
      tags: [Admin]
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 1 }
          description: Page number
        - in: query
          name: limit
          schema: { type: integer, default: 50 }
          description: Number of candidates per page
        - in: query
          name: search
          schema: { type: string }
          description: Search by name, JAMB number, or email
        - in: query
          name: status
          schema: { type: string, enum: [active, inactive, pending] }
          description: Filter by candidate status
        - in: query
          name: department
          schema: { type: string }
          description: Filter by department
        - in: query
          name: modeOfEntry
          schema: { type: string, enum: [UTME, DE] }
          description: Filter by mode of entry
      responses:
        '200':
          description: List of candidates
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Candidate' }
                  pagination:
                    type: object
                    properties:
                      page: { type: integer }
                      limit: { type: integer }
                      total: { type: integer }
                      totalPages: { type: integer }
                  timestamp: { type: string, format: date-time }

  /api/admin/candidates/{candidateId}:
    get:
      summary: Get candidate by ID
      tags: [Admin]
      parameters:
        - in: path
          name: candidateId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Candidate details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/Candidate' }
                  timestamp: { type: string, format: date-time }
        '404': { description: Candidate not found }

    put:
      summary: Update candidate
      tags: [Admin]
      parameters:
        - in: path
          name: candidateId
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status: { type: string }
                reason: { type: string }
      responses:
        '200':
          description: Candidate updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
                  timestamp: { type: string, format: date-time }

  /api/admin/candidates/stats:
    get:
      summary: Get candidate statistics
      tags: [Admin]
      description: |
        Get comprehensive statistics about candidates including:
        - Total number of candidates
        - Candidates grouped by status
        - Candidates grouped by program/department
        - Candidates grouped by state
      responses:
        '200':
          description: Candidate statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: object
                    properties:
                      totalCandidates: { type: integer }
                      candidatesByStatus:
                        type: object
                        additionalProperties: { type: integer }
                        description: Number of candidates by status
                      candidatesByProgram:
                        type: object
                        additionalProperties: { type: integer }
                        description: Number of candidates by program/department
                      candidatesByState:
                        type: object
                        additionalProperties: { type: integer }
                        description: Number of candidates by state
                  timestamp: { type: string, format: date-time }

  /api/admin/candidates/jamb/{jambRegNo}:
    get:
      summary: Get candidate by JAMB registration number
      tags: [Admin]
      parameters:
        - in: path
          name: jambRegNo
          required: true
          schema: { type: string, maxLength: 20 }
          description: JAMB registration number
      responses:
        '200':
          description: Candidate details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/Candidate' }
                  timestamp: { type: string, format: date-time }
        '404': { description: Candidate not found }

  /api/admin/candidates/{candidateId}/notes:
    post:
      summary: Add note to candidate
      tags: [Admin]
      parameters:
        - in: path
          name: candidateId
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [note]
              properties:
                note: { type: string }
                isPrivate: { type: boolean, default: false }
      responses:
        '201':
          description: Note added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
                  timestamp: { type: string, format: date-time }

    get:
      summary: Get candidate notes
      tags: [Admin]
      parameters:
        - in: path
          name: candidateId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: List of candidate notes
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: string, format: uuid }
                        note: { type: string }
                        isPrivate: { type: boolean }
                        createdAt: { type: string, format: date-time }
                  timestamp: { type: string, format: date-time }

  # Admin user management
  /api/admin/users:
    get:
      summary: Get all admin users
      tags: [Admin]
      responses:
        '200':
          description: List of admin users
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/AdminUser' }
                  timestamp: { type: string, format: date-time }

    post:
      summary: Create admin user
      tags: [Admin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminUserCreateRequest'
      responses:
        '201':
          description: Admin user created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/AdminUser' }
                  message: { type: string }
                  timestamp: { type: string, format: date-time }

  /api/admin/users/{id}:
    get:
      summary: Get admin user by ID
      tags: [Admin]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Admin user details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/AdminUser' }
                  timestamp: { type: string, format: date-time }

    put:
      summary: Update admin user
      tags: [Admin]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminUserUpdateRequest'
      responses:
        '200':
          description: Admin user updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/AdminUser' }
                  message: { type: string }
                  timestamp: { type: string, format: date-time }

    delete:
      summary: Delete admin user
      tags: [Admin]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Admin user deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
                  timestamp: { type: string, format: date-time }

  # Academic structure management
  /api/admin/faculties:
    get:
      summary: Get all faculties
      tags: [Admin]
      parameters:
        - in: query
          name: search
          schema: { type: string }
        - in: query
          name: isActive
          schema: { type: boolean }
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 10 }
      responses:
        '200':
          description: List of faculties
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Faculty' }
                  pagination:
                    $ref: '#/components/schemas/PaginationInfo'
                  timestamp: { type: string, format: date-time }

    post:
      summary: Create faculty
      tags: [Admin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FacultyCreateRequest'
      responses:
        '201':
          description: Faculty created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/Faculty' }
                  message: { type: string }
                  timestamp: { type: string, format: date-time }

  /api/admin/faculties/{id}:
    get:
      summary: Get faculty by ID
      tags: [Admin]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Faculty details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/Faculty' }
                  timestamp: { type: string, format: date-time }

    put:
      summary: Update faculty
      tags: [Admin]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FacultyUpdateRequest'
      responses:
        '200':
          description: Faculty updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/Faculty' }
                  message: { type: string }
                  timestamp: { type: string, format: date-time }

    delete:
      summary: Delete faculty
      tags: [Admin]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Faculty deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
                  timestamp: { type: string, format: date-time }

  # Department management
  /api/admin/departments:
    get:
      summary: Get all departments
      tags: [Admin]
      parameters:
        - in: query
          name: search
          schema: { type: string }
        - in: query
          name: facultyId
          schema: { type: string, format: uuid }
        - in: query
          name: isActive
          schema: { type: boolean }
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 10 }
      responses:
        '200':
          description: List of departments
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Department' }
                  pagination:
                    $ref: '#/components/schemas/PaginationInfo'
                  timestamp: { type: string, format: date-time }

    post:
      summary: Create department
      tags: [Admin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepartmentCreateRequest'
      responses:
        '201':
          description: Department created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/Department' }
                  message: { type: string }
                  timestamp: { type: string, format: date-time }

  /api/admin/departments/{id}:
    get:
      summary: Get department by ID
      tags: [Admin]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Department details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/Department' }
                  timestamp: { type: string, format: date-time }

    put:
      summary: Update department
      tags: [Admin]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepartmentUpdateRequest'
      responses:
        '200':
          description: Department updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/Department' }
                  message: { type: string }
                  timestamp: { type: string, format: date-time }

    delete:
      summary: Delete department
      tags: [Admin]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Department deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
                  timestamp: { type: string, format: date-time }

  # ============================================
  # Admin Payment Management Routes
  # ============================================

  /api/admin/payment-purposes:
    post:
      summary: Create a new payment purpose
      tags: [Admin]
      description: Create a new payment purpose for the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentPurposeCreateRequest'
      responses:
        '200':
          description: Payment purpose created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
                  data: { $ref: '#/components/schemas/PaymentPurpose' }
                  timestamp: { type: string, format: date-time }
        '400':
          description: Invalid request data
        '500':
          description: Internal server error

    get:
      summary: Get all payment purposes
      tags: [Admin]
      description: Retrieve all payment purposes with optional filtering
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 1 }
          description: Page number for pagination
        - in: query
          name: limit
          schema: { type: integer, default: 10 }
          description: Number of items per page
        - in: query
          name: category
          schema: { type: string }
          description: Filter by payment category
        - in: query
          name: session
          schema: { type: string }
          description: Filter by session
        - in: query
          name: level
          schema: { type: string }
          description: Filter by level
      responses:
        '200':
          description: Payment purposes retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/PaymentPurpose' }
                  pagination: { $ref: '#/components/schemas/PaginationInfo' }
                  timestamp: { type: string, format: date-time }

  /api/admin/payment-purposes/{id}:
    get:
      summary: Get payment purpose by ID
      tags: [Admin]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Payment purpose details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/PaymentPurpose' }
                  timestamp: { type: string, format: date-time }
        '404':
          description: Payment purpose not found

    put:
      summary: Update payment purpose
      tags: [Admin]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentPurposeUpdateRequest'
      responses:
        '200':
          description: Payment purpose updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
                  data: { $ref: '#/components/schemas/PaymentPurpose' }
                  timestamp: { type: string, format: date-time }

    delete:
      summary: Delete payment purpose (soft delete)
      tags: [Admin]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Payment purpose deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
                  timestamp: { type: string, format: date-time }

  /api/admin/payment-purposes/statistics:
    get:
      summary: Get payment purpose statistics
      tags: [Admin]
      description: Get statistics for payment purposes
      responses:
        '200':
          description: Payment purpose statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/PaymentPurposeStatistics' }
                  timestamp: { type: string, format: date-time }

  /api/admin/payments:
    get:
      summary: Get all payments
      tags: [Admin]
      description: Retrieve all payments with optional filtering
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 1 }
          description: Page number for pagination
        - in: query
          name: limit
          schema: { type: integer, default: 10 }
          description: Number of items per page
        - in: query
          name: status
          schema: { type: string }
          description: Filter by payment status
        - in: query
          name: purpose
          schema: { type: string }
          description: Filter by payment purpose
        - in: query
          name: startDate
          schema: { type: string, format: date }
          description: Filter by start date
        - in: query
          name: endDate
          schema: { type: string, format: date }
          description: Filter by end date
      responses:
        '200':
          description: Payments retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Payment' }
                  pagination: { $ref: '#/components/schemas/PaginationInfo' }
                  timestamp: { type: string, format: date-time }

  /api/admin/payments/{id}:
    get:
      summary: Get payment by ID
      tags: [Admin]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Payment details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/Payment' }
                  timestamp: { type: string, format: date-time }
        '404':
          description: Payment not found

  /api/admin/payments/{id}/verify:
    post:
      summary: Verify payment
      tags: [Admin]
      description: Verify or unverify a payment
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentVerificationRequest'
      responses:
        '200':
          description: Payment verification updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
                  data: { $ref: '#/components/schemas/Payment' }
                  timestamp: { type: string, format: date-time }

  /api/admin/payments/{id}/refund:
    post:
      summary: Refund payment
      tags: [Admin]
      description: Process a refund for a payment
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRefundRequest'
      responses:
        '200':
          description: Payment refunded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
                  data: { $ref: '#/components/schemas/Payment' }
                  timestamp: { type: string, format: date-time }

  /api/admin/payments/statistics:
    get:
      summary: Get payment statistics
      tags: [Admin]
      description: Get overall payment statistics
      responses:
        '200':
          description: Payment statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/PaymentStatistics' }
                  timestamp: { type: string, format: date-time }

  /api/admin/payments/monthly:
    get:
      summary: Get payments by month
      tags: [Admin]
      description: Get payment statistics grouped by month
      parameters:
        - in: query
          name: year
          schema: { type: integer }
          description: Year to filter by (defaults to current year)
      responses:
        '200':
          description: Monthly payment statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/MonthlyPaymentStats' }
                  timestamp: { type: string, format: date-time }

  /api/admin/payments/revenue:
    get:
      summary: Get total revenue
      tags: [Admin]
      description: Get total revenue statistics
      responses:
        '200':
          description: Total revenue statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/RevenueStatistics' }
                  timestamp: { type: string, format: date-time }

  /api/admin/payments/counts:
    get:
      summary: Get payment counts by status
      tags: [Admin]
      description: Get count of payments by status
      responses:
        '200':
          description: Payment counts by status
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/PaymentCounts' }
                  timestamp: { type: string, format: date-time }

  /api/admin/payments/by-status/{status}:
    get:
      summary: Get payments by status
      tags: [Admin]
      description: Get payments filtered by specific status
      parameters:
        - in: path
          name: status
          required: true
          schema: { type: string }
          description: Payment status to filter by
        - in: query
          name: page
          schema: { type: integer, default: 1 }
          description: Page number for pagination
        - in: query
          name: limit
          schema: { type: integer, default: 10 }
          description: Number of items per page
      responses:
        '200':
          description: Payments by status
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Payment' }
                  pagination: { $ref: '#/components/schemas/PaginationInfo' }
                  timestamp: { type: string, format: date-time }

  /api/admin/payments/by-purpose/{purpose}:
    get:
      summary: Get payments by purpose
      tags: [Admin]
      description: Get payments filtered by specific purpose
      parameters:
        - in: path
          name: purpose
          required: true
          schema: { type: string }
          description: Payment purpose to filter by
        - in: query
          name: page
          schema: { type: integer, default: 1 }
          description: Page number for pagination
        - in: query
          name: limit
          schema: { type: integer, default: 10 }
          description: Number of items per page
      responses:
        '200':
          description: Payments by purpose
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Payment' }
                  pagination: { $ref: '#/components/schemas/PaginationInfo' }
                  timestamp: { type: string, format: date-time }

  components:
  schemas:
    AdminUser:
      type: object
      properties:
        id: { type: string, format: uuid }
        username: { type: string, maxLength: 100 }
        email: { type: string, format: email }
        firstName: { type: string, maxLength: 100 }
        lastName: { type: string, maxLength: 100 }
        role: { type: string, enum: ['admin', 'super_admin', 'moderator'] }
        isActive: { type: boolean }
        lastLoginAt: { type: string, format: date-time }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    AdminUserCreateRequest:
      type: object
      required: [username, email, password, firstName, lastName, role]
      properties:
        username: { type: string, maxLength: 100 }
        email: { type: string, format: email }
        password: { type: string, format: password, minLength: 8 }
        firstName: { type: string, maxLength: 100 }
        lastName: { type: string, maxLength: 100 }
        role: { type: string, enum: ['admin', 'super_admin', 'moderator'] }

    AdminUserUpdateRequest:
      type: object
      properties:
        email: { type: string, format: email }
        firstName: { type: string, maxLength: 100 }
        lastName: { type: string, maxLength: 100 }
        role: { type: string, enum: ['admin', 'super_admin', 'moderator'] }
        isActive: { type: boolean }

    AdminLoginResponse:
      type: object
      properties:
        success: { type: boolean }
        data:
          type: object
          properties:
            user: { $ref: '#/components/schemas/AdminUser' }
            accessToken: { type: string }
            refreshToken: { type: string }
            expiresIn: { type: integer }
        message: { type: string }
        timestamp: { type: string, format: date-time }

    AdminAuthTokens:
      type: object
      properties:
        success: { type: boolean }
        data:
          type: object
          properties:
            accessToken: { type: string }
            refreshToken: { type: string }
            expiresIn: { type: integer }
        message: { type: string }
        timestamp: { type: string, format: date-time }

    Faculty:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string, maxLength: 200 }
        code: { type: string, maxLength: 20 }
        description: { type: string }
        isActive: { type: boolean }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    FacultyCreateRequest:
      type: object
      required: [name, code]
      properties:
        name: { type: string, maxLength: 200 }
        code: { type: string, maxLength: 20 }
        description: { type: string }
        isActive: { type: boolean, default: true }

    FacultyUpdateRequest:
      type: object
      properties:
        name: { type: string, maxLength: 200 }
        code: { type: string, maxLength: 20 }
        description: { type: string }
        isActive: { type: boolean }

    Department:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string, maxLength: 200 }
        code: { type: string, maxLength: 20 }
        description: { type: string }
        facultyId: { type: string, format: uuid }
        faculty: { $ref: '#/components/schemas/Faculty' }
        isActive: { type: boolean }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    DepartmentCreateRequest:
      type: object
      required: [name, code, facultyId]
      properties:
        name: { type: string, maxLength: 200 }
        code: { type: string, maxLength: 20 }
        description: { type: string }
        facultyId: { type: string, format: uuid }
        isActive: { type: boolean, default: true }

    DepartmentUpdateRequest:
      type: object
      properties:
        name: { type: string, maxLength: 200 }
        code: { type: string, maxLength: 20 }
        description: { type: string }
        facultyId: { type: string, format: uuid }
        isActive: { type: boolean }

    Program:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string, maxLength: 200 }
        code: { type: string, maxLength: 20 }
        description: { type: string }
        duration: { type: string, maxLength: 50 }
        degreeType: { type: string, maxLength: 100 }
        isActive: { type: boolean }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    ProgramCreateRequest:
      type: object
      required: [name, code, degreeType]
      properties:
        name: { type: string, maxLength: 200 }
        code: { type: string, maxLength: 20 }
        description: { type: string }
        duration: { type: string, maxLength: 50 }
        degreeType: { type: string, maxLength: 100 }
        isActive: { type: boolean, default: true }

    ProgramUpdateRequest:
      type: object
      properties:
        name: { type: string, maxLength: 200 }
        code: { type: string, maxLength: 20 }
        description: { type: string }
        duration: { type: string, maxLength: 50 }
        degreeType: { type: string, maxLength: 100 }
        isActive: { type: boolean }

    ProgramDepartmentLink:
      type: object
      properties:
        id: { type: string, format: uuid }
        programId: { type: string, format: uuid }
        departmentId: { type: string, format: uuid }
        program: { $ref: '#/components/schemas/Program' }
        department: { $ref: '#/components/schemas/Department' }
        isActive: { type: boolean }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    ProgramDepartmentLinkRequest:
      type: object
      required: [programId, departmentId]
      properties:
        programId: { type: string, format: uuid }
        departmentId: { type: string, format: uuid }
        isActive: { type: boolean, default: true }

    # ============================================
    # Payment Purpose Schemas
    # ============================================

    PaymentPurpose:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string, maxLength: 200 }
        purpose: { type: string, maxLength: 100 }
        description: { type: string }
        amount: { type: number, format: float }
        session: { type: string, maxLength: 20 }
        level: { type: string, maxLength: 20 }
        category: { type: string, maxLength: 50 }
        isActive: { type: boolean }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    PaymentPurposeCreateRequest:
      type: object
      required: [name, purpose, amount, session, level]
      properties:
        name: { type: string, maxLength: 200 }
        purpose: { type: string, maxLength: 100 }
        description: { type: string }
        amount: { type: number, format: float }
        session: { type: string, maxLength: 20 }
        level: { type: string, maxLength: 20 }
        category: { type: string, maxLength: 50 }
        isActive: { type: boolean, default: true }

    PaymentPurposeUpdateRequest:
      type: object
      properties:
        name: { type: string, maxLength: 200 }
        purpose: { type: string, maxLength: 100 }
        description: { type: string }
        amount: { type: number, format: float }
        session: { type: string, maxLength: 20 }
        level: { type: string, maxLength: 20 }
        category: { type: string, maxLength: 50 }
        isActive: { type: boolean }

    PaymentPurposeStatistics:
      type: object
      properties:
        total: { type: integer }
        active: { type: integer }
        inactive: { type: integer }
        byCategory:
          type: object
          additionalProperties: { type: integer }
        bySession:
          type: object
          additionalProperties: { type: integer }
        byLevel:
          type: object
          additionalProperties: { type: integer }

    # ============================================
    # Payment Schemas
    # ============================================

    Payment:
      type: object
      properties:
        id: { type: string, format: uuid }
        userId: { type: string, format: uuid }
        rrr: { type: string, maxLength: 50 }
        purpose: { type: string, maxLength: 100 }
        amount: { type: number, format: float }
        session: { type: string, maxLength: 20 }
        level: { type: string, maxLength: 20 }
        status: { type: string, enum: ['initiated', 'pending', 'success', 'failed', 'cancelled'] }
        paymentUrl: { type: string }
        webhookReceivedAt: { type: string, format: date-time }
        verifiedAt: { type: string, format: date-time }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    PaymentVerificationRequest:
      type: object
      required: [isVerified]
      properties:
        isVerified: { type: boolean }
        notes: { type: string }
        externalReference: { type: string }

    PaymentRefundRequest:
      type: object
      required: [amount, reason]
      properties:
        amount: { type: number, format: float }
        reason: { type: string }
        notes: { type: string }

    PaymentStatistics:
      type: object
      properties:
        total: { type: integer }
        successful: { type: integer }
        pending: { type: integer }
        failed: { type: integer }
        cancelled: { type: integer }
        totalAmount: { type: number, format: float }
        successfulAmount: { type: number, format: float }
        pendingAmount: { type: number, format: float }
        failedAmount: { type: number, format: float }

    MonthlyPaymentStats:
      type: object
      properties:
        month: { type: string }
        year: { type: integer }
        total: { type: integer }
        successful: { type: integer }
        pending: { type: integer }
        failed: { type: integer }
        totalAmount: { type: number, format: float }
        successfulAmount: { type: number, format: float }

    RevenueStatistics:
      type: object
      properties:
        totalRevenue: { type: number, format: float }
        thisMonth: { type: number, format: float }
        thisYear: { type: number, format: float }
        lastMonth: { type: number, format: float }
        lastYear: { type: number, format: float }

    PaymentCounts:
      type: object
      properties:
        total: { type: integer }
        successful: { type: integer }
        pending: { type: integer }
        failed: { type: integer }
        cancelled: { type: integer }

    PaginationInfo:
      type: object
      properties:
        page: { type: integer }
        limit: { type: integer }
        total: { type: integer }
        totalPages: { type: integer }
        hasNext: { type: boolean }
        hasPrev: { type: boolean }

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for admin authentication

tags:
  - name: Admin
    description: Administrative functions, user management, and system administration endpoints
