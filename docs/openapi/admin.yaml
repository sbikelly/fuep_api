openapi: 3.0.3
info:
  title: FUEP Post-UTME Portal - Simplified Admin Management API
  version: '2.0.0'
  description: |
    Administrative functions, user management, and system administration endpoints.

    This API has been significantly simplified and optimized:
    - Streamlined candidate management operations
    - Unified admin-candidate integration
    - Simplified payment purpose management
    - Enhanced analytics and reporting capabilities
    - Cleaner interfaces and improved performance

paths:
  # Admin authentication
  /api/admin/auth/login:
    post:
      summary: Admin user login
      tags: [Admin]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username: { type: string }
                password: { type: string, format: password }
      responses:
        '200':
          description: Admin authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminLoginResponse'
        '401': { description: Invalid credentials }

  /api/admin/auth/refresh:
    post:
      summary: Refresh admin access token
      tags: [Admin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refreshToken]
              properties:
                refreshToken: { type: string }
      responses:
        '200':
          description: New access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminAuthTokens'

  # Admin user management
  /api/admin/users:
    get:
      summary: Get all admin users
      tags: [Admin]
      responses:
        '200':
          description: List of admin users
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/AdminUser' }
                  timestamp: { type: string, format: date-time }

    post:
      summary: Create admin user
      tags: [Admin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminUserCreateRequest'
      responses:
        '201':
          description: Admin user created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/AdminUser' }
                  message: { type: string }
                  timestamp: { type: string, format: date-time }

  /api/admin/users/{id}:
    get:
      summary: Get admin user by ID
      tags: [Admin]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Admin user details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/AdminUser' }
                  timestamp: { type: string, format: date-time }

    put:
      summary: Update admin user
      tags: [Admin]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminUserUpdateRequest'
      responses:
        '200':
          description: Admin user updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/AdminUser' }
                  message: { type: string }
                  timestamp: { type: string, format: date-time }

    delete:
      summary: Delete admin user
      tags: [Admin]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Admin user deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
                  timestamp: { type: string, format: date-time }

  # Academic structure management
  /api/admin/faculties:
    get:
      summary: Get all faculties
      tags: [Admin]
      parameters:
        - in: query
          name: search
          schema: { type: string }
        - in: query
          name: isActive
          schema: { type: boolean }
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 10 }
      responses:
        '200':
          description: List of faculties
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Faculty' }
                  pagination:
                    $ref: '#/components/schemas/PaginationInfo'
                  timestamp: { type: string, format: date-time }

    post:
      summary: Create faculty
      tags: [Admin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FacultyCreateRequest'
      responses:
        '201':
          description: Faculty created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/Faculty' }
                  message: { type: string }
                  timestamp: { type: string, format: date-time }

  /api/admin/faculties/{id}:
    get:
      summary: Get faculty by ID
      tags: [Admin]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Faculty details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/Faculty' }
                  timestamp: { type: string, format: date-time }

    put:
      summary: Update faculty
      tags: [Admin]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FacultyUpdateRequest'
      responses:
        '200':
          description: Faculty updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/Faculty' }
                  message: { type: string }
                  timestamp: { type: string, format: date-time }

    delete:
      summary: Delete faculty
      tags: [Admin]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Faculty deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
                  timestamp: { type: string, format: date-time }

  # Department management
  /api/admin/departments:
    get:
      summary: Get all departments
      tags: [Admin]
      parameters:
        - in: query
          name: search
          schema: { type: string }
        - in: query
          name: facultyId
          schema: { type: string, format: uuid }
        - in: query
          name: isActive
          schema: { type: boolean }
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 10 }
      responses:
        '200':
          description: List of departments
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Department' }
                  pagination:
                    $ref: '#/components/schemas/PaginationInfo'
                  timestamp: { type: string, format: date-time }

    post:
      summary: Create department
      tags: [Admin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepartmentCreateRequest'
      responses:
        '201':
          description: Department created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/Department' }
                  message: { type: string }
                  timestamp: { type: string, format: date-time }

  /api/admin/departments/{id}:
    get:
      summary: Get department by ID
      tags: [Admin]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Department details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/Department' }
                  timestamp: { type: string, format: date-time }

    put:
      summary: Update department
      tags: [Admin]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepartmentUpdateRequest'
      responses:
        '200':
          description: Department updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/Department' }
                  message: { type: string }
                  timestamp: { type: string, format: date-time }

    delete:
      summary: Delete department
      tags: [Admin]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Department deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
                  timestamp: { type: string, format: date-time }

  # Program management
  /api/admin/programs:
    get:
      summary: Get all programs
      tags: [Admin]
      parameters:
        - in: query
          name: search
          schema: { type: string }
        - in: query
          name: isActive
          schema: { type: boolean }
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 10 }
      responses:
        '200':
          description: List of programs
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Program' }
                  pagination:
                    $ref: '#/components/schemas/PaginationInfo'
                  timestamp: { type: string, format: date-time }

    post:
      summary: Create program
      tags: [Admin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProgramCreateRequest'
      responses:
        '201':
          description: Program created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/Program' }
                  message: { type: string }
                  timestamp: { type: string, format: date-time }

  /api/admin/programs/{id}:
    get:
      summary: Get program by ID
      tags: [Admin]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Program details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/Program' }
                  timestamp: { type: string, format: date-time }

    put:
      summary: Update program
      tags: [Admin]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProgramUpdateRequest'
      responses:
        '200':
          description: Program updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/Program' }
                  message: { type: string }
                  timestamp: { type: string, format: date-time }

    delete:
      summary: Delete program
      tags: [Admin]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Program deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
                  timestamp: { type: string, format: date-time }

  # Program-Department relationships
  /api/admin/program-departments:
    post:
      summary: Link program to department
      tags: [Admin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProgramDepartmentLinkRequest'
      responses:
        '201':
          description: Program linked to department successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/ProgramDepartmentLink' }
                  message: { type: string }
                  timestamp: { type: string, format: date-time }

  /api/admin/departments/{id}/programs:
    get:
      summary: Get programs by department
      tags: [Admin]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Programs in department
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Program' }
                  timestamp: { type: string, format: date-time }

  /api/admin/programs/{id}/departments:
    get:
      summary: Get departments by program
      tags: [Admin]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Departments offering program
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Department' }
                  timestamp: { type: string, format: date-time }

components:
  schemas:
    AdminUser:
      type: object
      properties:
        id: { type: string, format: uuid }
        username: { type: string, maxLength: 100 }
        email: { type: string, format: email }
        firstName: { type: string, maxLength: 100 }
        lastName: { type: string, maxLength: 100 }
        role: { type: string, enum: ['admin', 'super_admin', 'moderator'] }
        isActive: { type: boolean }
        lastLoginAt: { type: string, format: date-time }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    AdminUserCreateRequest:
      type: object
      required: [username, email, password, firstName, lastName, role]
      properties:
        username: { type: string, maxLength: 100 }
        email: { type: string, format: email }
        password: { type: string, format: password, minLength: 8 }
        firstName: { type: string, maxLength: 100 }
        lastName: { type: string, maxLength: 100 }
        role: { type: string, enum: ['admin', 'super_admin', 'moderator'] }

    AdminUserUpdateRequest:
      type: object
      properties:
        email: { type: string, format: email }
        firstName: { type: string, maxLength: 100 }
        lastName: { type: string, maxLength: 100 }
        role: { type: string, enum: ['admin', 'super_admin', 'moderator'] }
        isActive: { type: boolean }

    AdminLoginResponse:
      type: object
      properties:
        success: { type: boolean }
        data:
          type: object
          properties:
            user: { $ref: '#/components/schemas/AdminUser' }
            accessToken: { type: string }
            refreshToken: { type: string }
            expiresIn: { type: integer }
        message: { type: string }
        timestamp: { type: string, format: date-time }

    AdminAuthTokens:
      type: object
      properties:
        success: { type: boolean }
        data:
          type: object
          properties:
            accessToken: { type: string }
            refreshToken: { type: string }
            expiresIn: { type: integer }
        message: { type: string }
        timestamp: { type: string, format: date-time }

    Faculty:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string, maxLength: 200 }
        code: { type: string, maxLength: 20 }
        description: { type: string }
        isActive: { type: boolean }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    FacultyCreateRequest:
      type: object
      required: [name, code]
      properties:
        name: { type: string, maxLength: 200 }
        code: { type: string, maxLength: 20 }
        description: { type: string }
        isActive: { type: boolean, default: true }

    FacultyUpdateRequest:
      type: object
      properties:
        name: { type: string, maxLength: 200 }
        code: { type: string, maxLength: 20 }
        description: { type: string }
        isActive: { type: boolean }

    Department:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string, maxLength: 200 }
        code: { type: string, maxLength: 20 }
        description: { type: string }
        facultyId: { type: string, format: uuid }
        faculty: { $ref: '#/components/schemas/Faculty' }
        isActive: { type: boolean }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    DepartmentCreateRequest:
      type: object
      required: [name, code, facultyId]
      properties:
        name: { type: string, maxLength: 200 }
        code: { type: string, maxLength: 20 }
        description: { type: string }
        facultyId: { type: string, format: uuid }
        isActive: { type: boolean, default: true }

    DepartmentUpdateRequest:
      type: object
      properties:
        name: { type: string, maxLength: 200 }
        code: { type: string, maxLength: 20 }
        description: { type: string }
        facultyId: { type: string, format: uuid }
        isActive: { type: boolean }

    Program:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string, maxLength: 200 }
        code: { type: string, maxLength: 20 }
        description: { type: string }
        duration: { type: string, maxLength: 50 }
        degreeType: { type: string, maxLength: 100 }
        isActive: { type: boolean }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    ProgramCreateRequest:
      type: object
      required: [name, code, degreeType]
      properties:
        name: { type: string, maxLength: 200 }
        code: { type: string, maxLength: 20 }
        description: { type: string }
        duration: { type: string, maxLength: 50 }
        degreeType: { type: string, maxLength: 100 }
        isActive: { type: boolean, default: true }

    ProgramUpdateRequest:
      type: object
      properties:
        name: { type: string, maxLength: 200 }
        code: { type: string, maxLength: 20 }
        description: { type: string }
        duration: { type: string, maxLength: 50 }
        degreeType: { type: string, maxLength: 100 }
        isActive: { type: boolean }

    ProgramDepartmentLink:
      type: object
      properties:
        id: { type: string, format: uuid }
        programId: { type: string, format: uuid }
        departmentId: { type: string, format: uuid }
        program: { $ref: '#/components/schemas/Program' }
        department: { $ref: '#/components/schemas/Department' }
        isActive: { type: boolean }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    ProgramDepartmentLinkRequest:
      type: object
      required: [programId, departmentId]
      properties:
        programId: { type: string, format: uuid }
        departmentId: { type: string, format: uuid }
        isActive: { type: boolean, default: true }

    PaginationInfo:
      type: object
      properties:
        page: { type: integer }
        limit: { type: integer }
        total: { type: integer }
        totalPages: { type: integer }
        hasNext: { type: boolean }
        hasPrev: { type: boolean }

tags:
  - name: Admin
    description: Administrative functions, user management, and system administration endpoints
