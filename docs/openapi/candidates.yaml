openapi: 3.0.3
info:
  title: FUEP Post-UTME Portal - Simplified Candidate Management API
  version: '2.0.0'
  description: |
    Simplified candidate registration, profile management, and application endpoints.

    This API has been significantly refactored to eliminate complexity while maintaining full functionality:
    - Progressive registration flow with clear progress tracking
    - Unified data model with streamlined database operations
    - Simplified interfaces and improved performance
    - Enhanced admin integration and analytics

paths:
  # JAMB verification and registration initiation
  /api/candidates/check-jamb:
    post:
      summary: Check JAMB registration and initiate candidate registration
      tags: [Candidates]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [jambRegNo]
              properties:
                jambRegNo: { type: string, maxLength: 20 }
      responses:
        '200':
          description: JAMB verification successful, registration initiated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/Candidate' }
                  message: { type: string }
                  timestamp: { type: string, format: date-time }
        '404': { description: JAMB registration not found }
        '400': { description: Invalid JAMB registration number }

  # Progressive profile completion
  /api/candidates/{candidateId}/complete-contact:
    post:
      summary: Complete candidate contact information
      tags: [Candidates]
      parameters:
        - in: path
          name: candidateId
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, phone]
              properties:
                email: { type: string, format: email }
                phone: { type: string }
      responses:
        '200':
          description: Contact information completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/Candidate' }
                  message: { type: string }
                  timestamp: { type: string, format: date-time }

  /api/candidates/{candidateId}/next-step:
    get:
      summary: Get next step in registration process
      tags: [Candidates]
      parameters:
        - in: path
          name: candidateId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Next step information
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/NextStepInfo' }
                  timestamp: { type: string, format: date-time }

  /api/candidates/{candidateId}/biodata:
    post:
      summary: Complete candidate biodata
      tags: [Candidates]
      parameters:
        - in: path
          name: candidateId
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateBiodataRequest'
      responses:
        '200':
          description: Biodata completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/Candidate' }
                  message: { type: string }
                  timestamp: { type: string, format: date-time }

  /api/candidates/{candidateId}/education:
    post:
      summary: Complete candidate education information
      tags: [Candidates]
      parameters:
        - in: path
          name: candidateId
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EducationRecordRequest'
      responses:
        '200':
          description: Education information completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/EducationRecord' }
                  message: { type: string }
                  timestamp: { type: string, format: date-time }

  /api/candidates/{candidateId}/next-of-kin:
    post:
      summary: Complete candidate next of kin information
      tags: [Candidates]
      parameters:
        - in: path
          name: candidateId
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NextOfKinRequest'
      responses:
        '200':
          description: Next of kin information completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/NextOfKin' }
                  message: { type: string }
                  timestamp: { type: string, format: date-time }

  /api/candidates/{candidateId}/sponsor:
    post:
      summary: Complete candidate sponsor information
      tags: [Candidates]
      parameters:
        - in: path
          name: candidateId
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SponsorRequest'
      responses:
        '200':
          description: Sponsor information completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/Sponsor' }
                  message: { type: string }
                  timestamp: { type: string, format: date-time }

  # Application submission
  /api/candidates/{candidateId}/application:
    post:
      summary: Submit candidate application
      tags: [Candidates]
      parameters:
        - in: path
          name: candidateId
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationCreateRequest'
      responses:
        '200':
          description: Application submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationCreateResponse'

  # Payment integration endpoints
  /api/candidates/{candidateId}/payment/purposes:
    get:
      summary: Get available payment purposes for candidate
      tags: [Candidates]
      parameters:
        - in: path
          name: candidateId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Available payment purposes
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/PaymentPurpose' }
                  timestamp: { type: string, format: date-time }

  /api/candidates/{candidateId}/payment/history:
    get:
      summary: Get candidate payment history
      tags: [Candidates]
      parameters:
        - in: path
          name: candidateId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Payment history
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/PaymentTransaction' }
                  timestamp: { type: string, format: date-time }

  /api/candidates/{candidateId}/payment/summary:
    get:
      summary: Get candidate payment summary
      tags: [Candidates]
      parameters:
        - in: path
          name: candidateId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Payment summary
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/PaymentSummary' }
                  timestamp: { type: string, format: date-time }

  # Profile management
  /api/candidates/profile/{jambRegNo}:
    get:
      summary: Get candidate profile by JAMB registration number
      tags: [Candidates]
      parameters:
        - in: path
          name: jambRegNo
          required: true
          schema: { type: string, maxLength: 20 }
      responses:
        '200':
          description: Candidate profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/Candidate' }
                  timestamp: { type: string, format: date-time }
        '404': { description: Candidate not found }

  /api/candidates/profile/{candidateId}:
    put:
      summary: Update candidate profile
      tags: [Candidates]
      parameters:
        - in: path
          name: candidateId
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateProfileUpdateRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateProfileUpdateResponse'

  # Profile completion and dashboard
  /api/candidates/{candidateId}/completion-status:
    get:
      summary: Get candidate profile completion status
      tags: [Candidates]
      parameters:
        - in: path
          name: candidateId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Profile completion status
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/ProfileCompletionStatus' }
                  timestamp: { type: string, format: date-time }

  /api/candidates/{candidateId}/dashboard:
    get:
      summary: Get candidate dashboard
      tags: [Candidates]
      parameters:
        - in: path
          name: candidateId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Candidate dashboard information
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/CandidateDashboard' }
                  timestamp: { type: string, format: date-time }

components:
  schemas:
    Candidate:
      type: object
      properties:
        id: { type: string, format: uuid }
        jambRegNo: { type: string, maxLength: 20 }
        firstname: { type: string, maxLength: 100 }
        surname: { type: string, maxLength: 100 }
        othernames: { type: string, maxLength: 100 }
        gender: { type: string, enum: ['male', 'female', 'other'] }
        dob: { type: string, format: date }
        nationality: { type: string, maxLength: 64 }
        state: { type: string, maxLength: 64 }
        lga: { type: string, maxLength: 64 }
        address: { type: string }
        email: { type: string, format: email }
        phone: { type: string, maxLength: 32 }
        department: { type: string, maxLength: 100 }
        modeOfEntry: { type: string, enum: ['UTME', 'DE'] }
        maritalStatus: { type: string, enum: ['single', 'married', 'divorced', 'widowed'] }
        passportPhotoUrl: { type: string }
        signatureUrl: { type: string }
        registrationCompleted: { type: boolean }
        biodataCompleted: { type: boolean }
        educationCompleted: { type: boolean }
        nextOfKinCompleted: { type: boolean }
        sponsorCompleted: { type: boolean }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    Application:
      type: object
      properties:
        id: { type: string, format: uuid }
        candidateId: { type: string, format: uuid }
        applicationNumber: { type: string, maxLength: 50 }
        session: { type: string, maxLength: 16 }
        status: { type: string, enum: ['pending', 'admitted', 'rejected'] }
        submittedAt: { type: string, format: date-time }
        reviewedAt: { type: string, format: date-time }
        reviewedBy: { type: string, format: uuid }
        reviewNotes: { type: string }
        paymentStatus: { type: string, enum: ['pending', 'paid', 'failed', 'refunded'] }
        paymentRrr: { type: string, maxLength: 100 }
        formPrinted: { type: boolean }
        printedAt: { type: string, format: date-time }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    EducationRecord:
      type: object
      properties:
        id: { type: string, format: uuid }
        candidateId: { type: string, format: uuid }
        secondarySchool: { type: string, maxLength: 200 }
        certificateType: { type: string, maxLength: 20 }
        examYear: { type: integer }
        examType: { type: string, maxLength: 20 }
        seatingCount: { type: integer }
        examNumbers:
          type: array
          items: { type: string }
        subjects: { type: object }
        jambScore: { type: integer }
        jambSubjects: { type: object }
        certificateTypeDe: { type: string, maxLength: 20 }
        institutionName: { type: string, maxLength: 200 }
        fieldOfStudy: { type: string, maxLength: 100 }
        startDate: { type: string, format: date }
        endDate: { type: string, format: date }
        cgpa: { type: string, maxLength: 10 }
        certificateNumber: { type: string, maxLength: 100 }
        grade: { type: string, maxLength: 20 }
        # Certificate upload URLs removed - documents module no longer exists
        verificationStatus: { type: string, enum: ['pending', 'verified', 'rejected'] }
        verificationNotes: { type: string }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    NextOfKin:
      type: object
      properties:
        id: { type: string, format: uuid }
        candidateId: { type: string, format: uuid }
        surname: { type: string, maxLength: 100 }
        firstname: { type: string, maxLength: 100 }
        othernames: { type: string, maxLength: 100 }
        relationship: { type: string, maxLength: 100 }
        phone: { type: string, maxLength: 32 }
        email: { type: string, format: email }
        address: { type: string }
        occupation: { type: string, maxLength: 100 }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    Sponsor:
      type: object
      properties:
        id: { type: string, format: uuid }
        candidateId: { type: string, format: uuid }
        surname: { type: string, maxLength: 100 }
        firstname: { type: string, maxLength: 100 }
        othernames: { type: string, maxLength: 100 }
        relationship: { type: string, maxLength: 100 }
        phone: { type: string, maxLength: 32 }
        email: { type: string, format: email }
        address: { type: string }
        occupation: { type: string, maxLength: 100 }
        paymentResponsibility: { type: boolean }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    ProfileCompletionStatus:
      type: object
      properties:
        candidateId: { type: string, format: uuid }
        biodataCompleted: { type: boolean }
        educationCompleted: { type: boolean }
        nextOfKinCompleted: { type: boolean }
        sponsorCompleted: { type: boolean }
        registrationCompleted: { type: boolean }
        nextStep: { type: string }
        progressPercentage: { type: number }

    NextStepInfo:
      type: object
      properties:
        currentStep: { type: string }
        nextStep: { type: string }
        isCompleted: { type: boolean }
        message: { type: string }
        requiredFields:
          type: array
          items: { type: string }

    PaymentPurpose:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string, maxLength: 100 }
        purpose: { type: string, maxLength: 50 }
        description: { type: string }
        amount: { type: number, format: float }
        isActive: { type: boolean }
        session: { type: string, maxLength: 16 }
        level: { type: string, maxLength: 10 }
        createdBy: { type: string, format: uuid }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    PaymentTransaction:
      type: object
      properties:
        id: { type: string, format: uuid }
        candidateId: { type: string, format: uuid }
        purposeId: { type: string, format: uuid }
        amount: { type: number, format: float }
        status: { type: string, enum: ['pending', 'paid', 'failed', 'refunded'] }
        rrr: { type: string, maxLength: 100 }
        provider: { type: string }
        providerReference: { type: string }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    PaymentSummary:
      type: object
      properties:
        totalAmount: { type: number, format: float }
        paidAmount: { type: number, format: float }
        pendingAmount: { type: number, format: float }
        totalTransactions: { type: integer }
        paidTransactions: { type: integer }
        pendingTransactions: { type: integer }

    # Request/Response schemas
    CandidateBiodataRequest:
      type: object
      required: [dob, gender, nationality, state, lga, address, maritalStatus]
      properties:
        dob: { type: string, format: date }
        gender: { type: string, enum: ['male', 'female', 'other'] }
        nationality: { type: string, maxLength: 64 }
        state: { type: string, maxLength: 64 }
        lga: { type: string, maxLength: 64 }
        address: { type: string }
        maritalStatus: { type: string, enum: ['single', 'married', 'divorced', 'widowed'] }

    EducationRecordRequest:
      type: object
      properties:
        secondarySchool: { type: string, maxLength: 200 }
        certificateType: { type: string, maxLength: 20 }
        examYear: { type: integer }
        examType: { type: string, maxLength: 20 }
        seatingCount: { type: integer }
        examNumbers:
          type: array
          items: { type: string }
        subjects: { type: object }
        jambScore: { type: integer }
        jambSubjects: { type: object }
        certificateTypeDe: { type: string, maxLength: 20 }
        institutionName: { type: string, maxLength: 200 }
        fieldOfStudy: { type: string, maxLength: 100 }
        startDate: { type: string, format: date }
        endDate: { type: string, format: date }
        cgpa: { type: string, maxLength: 10 }
        certificateNumber: { type: string, maxLength: 100 }
        grade: { type: string, maxLength: 20 }

    NextOfKinRequest:
      type: object
      required: [surname, firstname, relationship, phone, address, occupation]
      properties:
        surname: { type: string, maxLength: 100 }
        firstname: { type: string, maxLength: 100 }
        othernames: { type: string, maxLength: 100 }
        relationship: { type: string, maxLength: 100 }
        phone: { type: string, maxLength: 32 }
        email: { type: string, format: email }
        address: { type: string }
        occupation: { type: string, maxLength: 100 }

    SponsorRequest:
      type: object
      required: [surname, firstname, relationship, phone, address, occupation]
      properties:
        surname: { type: string, maxLength: 100 }
        firstname: { type: string, maxLength: 100 }
        othernames: { type: string, maxLength: 100 }
        relationship: { type: string, maxLength: 100 }
        phone: { type: string, maxLength: 32 }
        email: { type: string, format: email }
        address: { type: string }
        occupation: { type: string, maxLength: 100 }
        paymentResponsibility: { type: boolean }

    ApplicationCreateRequest:
      type: object
      required: [session, department]
      properties:
        session: { type: string, pattern: '^\\d{4}/\\d{4}$' }
        department: { type: string, maxLength: 100 }

    ApplicationCreateResponse:
      type: object
      properties:
        success: { type: boolean }
        data: { $ref: '#/components/schemas/Application' }
        message: { type: string }
        timestamp: { type: string, format: date-time }

    CandidateProfileUpdateRequest:
      type: object
      properties:
        firstname: { type: string, maxLength: 100 }
        surname: { type: string, maxLength: 100 }
        othernames: { type: string, maxLength: 100 }
        email: { type: string, format: email }
        phone: { type: string, maxLength: 32 }
        address: { type: string }
        department: { type: string, maxLength: 100 }

    CandidateProfileUpdateResponse:
      type: object
      properties:
        success: { type: boolean }
        data: { $ref: '#/components/schemas/Candidate' }
        message: { type: string }
        timestamp: { type: string, format: date-time }

    CandidateDashboard:
      type: object
      properties:
        candidate: { $ref: '#/components/schemas/Candidate' }
        application: { $ref: '#/components/schemas/Application' }
        completionStatus: { $ref: '#/components/schemas/ProfileCompletionStatus' }
        nextStep: { $ref: '#/components/schemas/NextStepInfo' }

tags:
  - name: Candidates
    description: Candidate registration, profile management, and application endpoints
