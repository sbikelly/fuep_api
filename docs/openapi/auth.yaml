openapi: 3.0.3
info:
  title: FUEP Post-UTME Portal - Authentication API
  version: '2.0.0'
  description: |
    Authentication and authorization endpoints for candidates and admin users.

    This API has been significantly simplified and optimized:
    - Streamlined JAMB verification process
    - Simplified candidate authentication flow
    - Enhanced security and rate limiting
    - Cleaner interfaces and improved performance

paths:
  # JAMB verification
  /api/auth/check-jamb:
    post:
      summary: Verify JAMB registration number
      tags: [Authentication]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [jambRegNo]
              properties:
                jambRegNo: { type: string, maxLength: 20 }
      responses:
        '200':
          description: JAMB verification successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JambVerificationResponse'
        '404': { description: JAMB registration not found }
        '400': { description: Invalid JAMB registration number }

  # Candidate authentication
  /api/auth/login:
    post:
      summary: Candidate login
      tags: [Authentication]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [jambRegNo, password]
              properties:
                jambRegNo: { type: string, maxLength: 20 }
                password: { type: string, format: password }
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateLoginResponse'
        '401': { description: Invalid credentials }
        '404': { description: Candidate not found }

  # Password management
  /api/auth/change-password:
    post:
      summary: Change candidate password
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [currentPassword, newPassword]
              properties:
                currentPassword: { type: string, format: password }
                newPassword: { type: string, format: password, minLength: 8 }
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordChangeResponse'
        '400': { description: Invalid current password }
        '401': { description: Unauthorized' }

  # Token management
  /api/auth/refresh-token:
    post:
      summary: Refresh access token
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refreshToken]
              properties:
                refreshToken: { type: string }
      responses:
        '200':
          description: New access token generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefreshResponse'
        '401': { description: Invalid refresh token }

  /api/auth/logout:
    post:
      summary: Logout candidate
      tags: [Authentication]
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse'

components:
  schemas:
    JambVerificationResponse:
      type: object
      properties:
        success: { type: boolean }
        data:
          type: object
          properties:
            jambRegNo: { type: string, maxLength: 20 }
            verified: { type: boolean }
            candidateExists: { type: boolean }
            message: { type: string }
        timestamp: { type: string, format: date-time }

    CandidateLoginResponse:
      type: object
      properties:
        success: { type: boolean }
        data:
          type: object
          properties:
            candidate: { $ref: '#/components/schemas/CandidateSummary' }
            accessToken: { type: string }
            refreshToken: { type: string }
            expiresIn: { type: integer }
            message: { type: string }
        timestamp: { type: string, format: date-time }

    PasswordChangeResponse:
      type: object
      properties:
        success: { type: boolean }
        message: { type: string }
        timestamp: { type: string, format: date-time }

    TokenRefreshResponse:
      type: object
      properties:
        success: { type: boolean }
        data:
          type: object
          properties:
            accessToken: { type: string }
            refreshToken: { type: string }
            expiresIn: { type: integer }
        message: { type: string }
        timestamp: { type: string, format: date-time }

    LogoutResponse:
      type: object
      properties:
        success: { type: boolean }
        message: { type: string }
        timestamp: { type: string, format: date-time }

    CandidateSummary:
      type: object
      properties:
        id: { type: string, format: uuid }
        jambRegNo: { type: string, maxLength: 20 }
        firstname: { type: string, maxLength: 100 }
        surname: { type: string, maxLength: 100 }
        email: { type: string, format: email }
        phone: { type: string, maxLength: 32 }
        department: { type: string, maxLength: 100 }
        modeOfEntry: { type: string, enum: ['UTME', 'DE'] }
        registrationCompleted: { type: boolean }

tags:
  - name: Authentication
    description: Authentication and authorization endpoints for candidates and admin users
