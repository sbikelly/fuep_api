openapi: 3.0.3
info:
  title: FUEP Post-UTME Portal API
  version: '1.0.0'
  description: REST API for candidate and admin workflows, payments, admissions, matriculation, and migration.

servers:
  - url: https://api.example.edu/v1
  - url: http://localhost:4000/api
  - url: http://localhost:8080/api

security:
  - bearerAuth: []

paths:
  /api/auth/check-jamb:
    post:
      summary: Check if JAMB Reg No exists in preloaded list
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [jambRegNo]
              properties:
                jambRegNo: { type: string, maxLength: 20 }
      responses:
        '200':
          description: Result
          content:
            application/json:
              schema:
                type: object
                properties:
                  exists: { type: boolean }
                  biodata:
                    $ref: '#/components/schemas/JambPrelistMinimal'
        '400': { description: Invalid input }

  /api/payments/init:
    post:
      summary: Initialize a payment
      security:
        - bearerAuth: [] # optional; can be public for first payment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [purpose, jambRegNo, amount, session]
              properties:
                purpose: { $ref: '#/components/schemas/PaymentPurpose' }
                jambRegNo: { type: string }
                amount: { type: number, format: float }
                session: { type: string }
                email: { type: string }
                phone: { type: string }
      responses:
        '201':
          description: Payment created / provider init response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentInitResponse'

  /api/payments/{paymentId}:
    get:
      summary: Get payment status and details
      parameters:
        - in: path
          name: paymentId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Payment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentStatusCheckResponse'
        '404': { description: Payment not found }

  /api/payments/{paymentId}/verify:
    post:
      summary: Manually verify payment with provider
      parameters:
        - in: path
          name: paymentId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Payment verification result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentVerificationResponse'
        '404': { description: Payment not found }

  /api/payments/{paymentId}/receipt:
    get:
      summary: Get payment receipt
      parameters:
        - in: path
          name: paymentId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Payment receipt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentReceiptResponse'
        '400': { description: Payment not successful' }
        '404': { description: Payment not found }

  /payments/webhook/remita:
    post:
      summary: Remita webhook callback
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object, additionalProperties: true }
      responses:
        '200': { description: Acknowledged }

  /payments/webhook/flutterwave:
    post:
      summary: Flutterwave webhook callback
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object, additionalProperties: true }
      responses:
        '200': { description: Acknowledged }

  /payments/providers/status:
    get:
      summary: Get payment provider status
      responses:
        '200':
          description: Provider status information
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { type: object }
                  timestamp: { type: string, format: date-time }

  /auth/login:
    post:
      summary: Candidate login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username: { type: string, description: 'JAMB Reg No' }
                password: { type: string, format: password }
      responses:
        '200':
          description: JWT tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokens'
        '401': { description: Invalid credentials }

  /auth/change-password:
    post:
      summary: Change password (forced on first login)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [oldPassword, newPassword]
              properties:
                oldPassword: { type: string }
                newPassword: { type: string, minLength: 8 }
      responses:
        '204': { description: Changed }

  /me:
    get:
      summary: Get current candidate composite profile
      responses:
        '200':
          description: Composite profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Me'

  /profile:
    put:
      summary: Update biodata profile
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProfileUpdate' }
      responses:
        '200':
          description: Saved
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Profile' }

  /education-records:
    post:
      summary: Create education record
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/EducationRecordCreate' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/EducationRecord' }

  /education-records/{id}:
    put:
      summary: Update education record
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/EducationRecordUpdate' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/EducationRecord' }

  /uploads:
    post:
      summary: Upload a document (multipart)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [type, file]
              properties:
                type: { $ref: '#/components/schemas/UploadType' }
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: Uploaded
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Upload' }

  /registration-form:
    get:
      summary: Registration form JSON (for preview)
      responses:
        '200':
          description: JSON data
          content:
            application/json:
              schema: { $ref: '#/components/schemas/RegistrationPreview' }

  /registration-form.pdf:
    get:
      summary: Registration form PDF
      responses:
        '200':
          description: PDF
          content:
            application/pdf:
              schema:
                type: string
                format: binary

  /dashboard:
    get:
      summary: Candidate dashboard summary
      responses:
        '200':
          description: Summary
          content:
            application/json:
              schema: { $ref: '#/components/schemas/DashboardSummary' }

  /admission-letter.pdf:
    get:
      summary: Admission letter (PDF) if eligible
      responses:
        '200':
          description: PDF
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '403': { description: Not eligible }

  # -------- Candidate Module --------

  /api/candidates/jamb/{jambRegNo}:
    get:
      summary: Get candidate by JAMB registration number
      parameters:
        - in: path
          name: jambRegNo
          required: true
          schema: { type: string, maxLength: 20 }
      responses:
        '200':
          description: Candidate details with program choices and related data
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/Candidate' }
                  timestamp: { type: string, format: date-time }
        '404': { description: Candidate not found }

  /api/candidates/{candidateId}/status:
    get:
      summary: Get comprehensive candidate status
      parameters:
        - in: path
          name: candidateId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Candidate status information
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/CandidateStatus' }
                  timestamp: { type: string, format: date-time }
        '404': { description: Candidate not found }

  /api/candidates/{candidateId}/application:
    get:
      summary: Get candidate application
      parameters:
        - in: path
          name: candidateId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Application details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/Application' }
                  timestamp: { type: string, format: date-time }
        '404': { description: Application not found }
    post:
      summary: Create new application
      parameters:
        - in: path
          name: candidateId
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [session]
              properties:
                session: { type: string }
                programmeCode: { type: string }
                departmentCode: { type: string }
      responses:
        '201':
          description: Application created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/Application' }
                  message: { type: string }
                  timestamp: { type: string, format: date-time }
        '400': { description: Invalid input }
        '409': { description: Application already exists }
    put:
      summary: Update application
      parameters:
        - in: path
          name: candidateId
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                programChoice1: { type: string }
                programChoice2: { type: string }
                programChoice3: { type: string }
                jambScore: { type: number }
      responses:
        '200':
          description: Application updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/Application' }
                  message: { type: string }
                  timestamp: { type: string, format: date-time }
        '400': { description: Invalid input }
        '404': { description: Application not found }

  /api/candidates/{candidateId}/registration-form:
    get:
      summary: Get registration form data
      parameters:
        - in: path
          name: candidateId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Registration form data
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/RegistrationFormData' }
                  timestamp: { type: string, format: date-time }
        '404': { description: Candidate not found }

  /api/candidates/{candidateId}/registration-form.pdf:
    get:
      summary: Generate registration form PDF
      parameters:
        - in: path
          name: candidateId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: PDF document
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '404': { description: Candidate not found }

  /api/candidates/{candidateId}/admission-status:
    get:
      summary: Get admission status
      parameters:
        - in: path
          name: candidateId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Admission status
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/AdmissionStatus' }
                  timestamp: { type: string, format: date-time }
        '404': { description: Candidate not found }

  /api/candidates/{candidateId}/admission-letter.pdf:
    get:
      summary: Generate admission letter PDF
      parameters:
        - in: path
          name: candidateId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: PDF document
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '404': { description: Candidate not found }

  /api/candidates/{candidateId}/matric-number:
    get:
      summary: Get matriculation number
      parameters:
        - in: path
          name: candidateId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Matriculation details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/MatriculationDetails' }
                  timestamp: { type: string, format: date-time }
        '404': { description: Not matriculated }

  /api/candidates/{candidateId}/migration-status:
    get:
      summary: Get migration status
      parameters:
        - in: path
          name: candidateId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Migration status
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/MigrationStatus' }
                  timestamp: { type: string, format: date-time }
        '404': { description: Candidate not found }

  /api/candidates/{candidateId}/dashboard:
    get:
      summary: Get candidate dashboard data
      parameters:
        - in: path
          name: candidateId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Dashboard data
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/CandidateDashboard' }
                  timestamp: { type: string, format: date-time }
        '404': { description: Candidate not found }

  /api/candidates/{candidateId}/completion-status:
    get:
      summary: Get profile completion status
      parameters:
        - in: path
          name: candidateId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Completion status
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/ProfileCompletionStatus' }
                  timestamp: { type: string, format: date-time }
        '404': { description: Candidate not found }

  # New Candidate Registration Flow Endpoints
  /api/candidates/check-jamb:
    post:
      summary: Check JAMB registration number and initiate registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - jambRegNo
              properties:
                jambRegNo:
                  type: string
                  description: JAMB registration number
                  example: 'JAMB001'
                email:
                  type: string
                  format: email
                  description: Candidate email address (if not in JAMB data)
                  example: 'candidate@example.com'
                phone:
                  type: string
                  description: Candidate phone number (if not in JAMB data)
                  example: '+2348012345678'
      responses:
        '200':
          description: JAMB verification successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/JambVerificationResponse' }
                  timestamp: { type: string, format: date-time }
        '400': { description: Invalid JAMB number }
        '404': { description: JAMB number not found }
        '500': { description: Internal server error }

  /api/candidates/complete-contact:
    post:
      summary: Complete missing contact information for JAMB verification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - jambRegNo
                - email
                - phone
              properties:
                jambRegNo:
                  type: string
                  description: JAMB registration number
                  example: 'JAMB001'
                email:
                  type: string
                  format: email
                  description: Candidate email address
                  example: 'candidate@example.com'
                phone:
                  type: string
                  description: Candidate phone number
                  example: '+2348012345678'
      responses:
        '200':
          description: Contact information updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/ContactUpdateResponse' }
                  timestamp: { type: string, format: date-time }
        '400': { description: Invalid contact information }
        '404': { description: JAMB number not found }
        '500': { description: Internal server error }

  /api/candidates/{candidateId}/next-step:
    get:
      summary: Get next step in registration process
      parameters:
        - in: path
          name: candidateId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Next step information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data: { $ref: '#/components/schemas/NextStepResponse' }
                  timestamp: { type: string, format: date-time }
        '404': { description: Candidate not found }
        '500': { description: Internal server error }

  # -------- Admin --------

  /admin/prelist/upload:
    post:
      summary: Upload JAMB prelist CSV/Excel
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [file, session]
              properties:
                session: { type: string }
                file:
                  type: string
                  format: binary
      responses:
        '201': { description: Imported }

  /admin/candidates:
    get:
      summary: List candidates (filters)
      parameters:
        - in: query
          name: session
          schema: { type: string }
        - in: query
          name: programme
          schema: { type: string }
        - in: query
          name: status
          schema: { $ref: '#/components/schemas/DecisionStatus' }
      responses:
        '200':
          description: Paged list
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: { $ref: '#/components/schemas/CandidateAdminView' }
                  total: { type: integer }

  /admin/admissions/{candidateId}:
    patch:
      summary: Update admission decision
      parameters:
        - in: path
          name: candidateId
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [decision]
              properties:
                decision: { $ref: '#/components/schemas/DecisionStatus' }
                notes: { type: string }
      responses:
        '200': { description: Updated }

  /admin/matric/{candidateId}:
    post:
      summary: Assign matric number (if eligible)
      parameters:
        - in: path
          name: candidateId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '201':
          description: Student record created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Student' }

  /admin/reconcile/{paymentId}:
    post:
      summary: Manually re-verify payment with provider
      parameters:
        - in: path
          name: paymentId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Current provider status
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Payment' }

  /admin/migrate/{studentId}:
    post:
      summary: Push student to main portal
      parameters:
        - in: path
          name: studentId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '202': { description: Migration queued }

  # -------payment  ------------

  /payments/history:
    get:
      summary: Get candidate payment history
      responses:
        '200':
          description: Payment history
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payment'

    PaymentStatusCheckResponse:
      type: object
      properties:
        payment:
          $ref: '#/components/schemas/Payment'
        providerResponse: { type: object, additionalProperties: true }

    PaymentVerificationResponse:
      type: object
      properties:
        payment:
          $ref: '#/components/schemas/Payment'
        verified: { type: boolean }
        message: { type: string }

    PaymentReceiptResponse:
      type: object
      properties:
        payment:
          $ref: '#/components/schemas/Payment'
        receiptUrl: { type: string }

  # ------- Payments management (for creating/updating/deleting payment type, amount, and other relevant informations) --------
  /admin/payments/types:
    get:
      summary: List payment types
      responses:
        '200':
          description: List of payment types
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/PaymentPurpose' }

  # ------Payments reconciliation tool  ------------
  /admin/payments/reconcile:
    post:
      summary: Reconcile payments with provider
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                provider: { $ref: '#/components/schemas/PaymentProvider' }
                startDate: { type: string, format: date-time }
                endDate: { type: string, format: date-time }
      responses:
        '200':
          description: Reconciliation result
          content:
            application/json:
              schema:
                type: object
                properties:
                  reconciledCount: { type: integer }
                  failedCount: { type: integer }

  # ============================================
  # Admin Portal Endpoints
  # ============================================

  /api/admin/auth/login:
    post:
      summary: Admin login
      tags: [Admin Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username: { type: string }
                password: { type: string }
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminLoginResponse'
        '401':
          description: Invalid credentials

  /api/admin/auth/refresh:
    post:
      summary: Refresh admin access token
      tags: [Admin Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refreshToken]
              properties:
                refreshToken: { type: string }
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminAuthTokens'
        '401':
          description: Invalid refresh token

  /api/health:
    get:
      summary: Admin module health check
      tags: [Admin Health]
      responses:
        '200':
          description: Admin module health status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminHealthStatus'

  /api/admin/dashboard:
    get:
      summary: Get admin dashboard summary
      tags: [Admin Dashboard]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Dashboard summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminDashboardSummary'
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

  /api/admin/analytics:
    get:
      summary: Get admin analytics data
      tags: [Admin Analytics]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: timeRange
          schema:
            type: string
            enum: ['7d', '30d', '90d', '1y']
            default: '30d'
          description: Time range for analytics
      responses:
        '200':
          description: Analytics data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminAnalytics'
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

  # Admin User Management
  /api/admin/users:
    get:
      summary: Get admin users list
      tags: [Admin Users]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: limit
          schema: { type: integer, default: 50 }
        - in: query
          name: offset
          schema: { type: integer, default: 0 }
        - in: query
          name: role
          schema: { type: string }
        - in: query
          name: isActive
          schema: { type: boolean }
      responses:
        '200':
          description: Admin users list
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/AdminUser' }
                  total: { type: integer }
                  timestamp: { type: string, format: date-time }
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

    post:
      summary: Create new admin user
      tags: [Admin Users]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, email, password, role]
              properties:
                username: { type: string }
                email: { type: string, format: email }
                password: { type: string, minLength: 8 }
                role: { $ref: '#/components/schemas/AdminRole' }
                isActive: { type: boolean, default: true }
      responses:
        '201':
          description: Admin user created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminUser'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

  /api/admin/users/{id}:
    get:
      summary: Get admin user by ID
      tags: [Admin Users]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Admin user details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminUser'
        '404':
          description: User not found
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

    put:
      summary: Update admin user
      tags: [Admin Users]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username: { type: string }
                email: { type: string, format: email }
                role: { $ref: '#/components/schemas/AdminRole' }
                isActive: { type: boolean }
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminUser'
        '400':
          description: Invalid input
        '404':
          description: User not found
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

    delete:
      summary: Delete admin user
      tags: [Admin Users]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204':
          description: User deleted
        '404':
          description: User not found
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

  /api/admin/users/{id}/change-password:
    post:
      summary: Change admin user password
      tags: [Admin Users]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [newPassword]
              properties:
                newPassword: { type: string, minLength: 8 }
      responses:
        '200':
          description: Password changed
        '400':
          description: Invalid input
        '404':
          description: User not found
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

  # Admin Permissions Management
  /api/admin/permissions:
    get:
      summary: Get permissions list
      tags: [Admin Permissions]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Permissions list
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/AdminPermission' }
                  timestamp: { type: string, format: date-time }
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

    post:
      summary: Create new permission
      tags: [Admin Permissions]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [role, resource, action]
              properties:
                role: { $ref: '#/components/schemas/AdminRole' }
                resource: { type: string }
                action: { type: string }
      responses:
        '201':
          description: Permission created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminPermission'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

  /api/admin/permissions/{id}:
    put:
      summary: Update permission
      tags: [Admin Permissions]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role: { $ref: '#/components/schemas/AdminRole' }
                resource: { type: string }
                action: { type: string }
      responses:
        '200':
          description: Permission updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminPermission'
        '400':
          description: Invalid input
        '404':
          description: Permission not found
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

    delete:
      summary: Delete permission
      tags: [Admin Permissions]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204':
          description: Permission deleted
        '404':
          description: Permission not found
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

  /api/admin/permissions/matrix:
    get:
      summary: Get permissions matrix
      tags: [Admin Permissions]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Permissions matrix
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: object
                    additionalProperties:
                      type: object
                      additionalProperties:
                        type: array
                        items: { type: string }
                  timestamp: { type: string, format: date-time }
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

  # Prelist Management
  /api/admin/prelist/upload:
    post:
      summary: Upload prelist file
      tags: [Admin Prelist]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [file]
              properties:
                file:
                  type: string
                  format: binary
                  description: CSV/Excel file containing JAMB prelist data
      responses:
        '201':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrelistUploadResponse'
        '400':
          description: Invalid file format
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

  /api/admin/prelist/batches:
    get:
      summary: Get prelist upload batches
      tags: [Admin Prelist]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: limit
          schema: { type: integer, default: 50 }
        - in: query
          name: offset
          schema: { type: integer, default: 0 }
        - in: query
          name: status
          schema: { type: string }
      responses:
        '200':
          description: Prelist batches
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: object
                    properties:
                      batches:
                        type: array
                        items: { $ref: '#/components/schemas/PrelistBatch' }
                      total: { type: integer }
                  timestamp: { type: string, format: date-time }
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

  /api/admin/prelist/batches/{id}:
    get:
      summary: Get prelist batch details
      tags: [Admin Prelist]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Batch details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrelistBatch'
        '404':
          description: Batch not found
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

  /api/admin/prelist/batches/{id}/errors:
    get:
      summary: Get prelist batch errors
      tags: [Admin Prelist]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Batch errors
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/PrelistError' }
                  timestamp: { type: string, format: date-time }
        '404':
          description: Batch not found
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

  # Candidate Management
  /api/admin/candidates:
    get:
      summary: Get candidates list
      tags: [Admin Candidates]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: limit
          schema: { type: integer, default: 50 }
        - in: query
          name: offset
          schema: { type: integer, default: 0 }
        - in: query
          name: status
          schema: { type: string }
        - in: query
          name: session
          schema: { type: string }
        - in: query
          name: program
          schema: { type: string }
      responses:
        '200':
          description: Candidates list
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: object
                    properties:
                      candidates:
                        type: array
                        items: { $ref: '#/components/schemas/CandidateAdminView' }
                      total: { type: integer }
                  timestamp: { type: string, format: date-time }
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

  /api/admin/candidates/{id}:
    get:
      summary: Get candidate details
      tags: [Admin Candidates]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Candidate details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateAdminView'
        '404':
          description: Candidate not found
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

    put:
      summary: Update candidate
      tags: [Admin Candidates]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                application_status: { type: string }
                payment_status: { type: string }
                admission_status: { type: string }
                notes: { type: string }
      responses:
        '200':
          description: Candidate updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateAdminView'
        '400':
          description: Invalid input
        '404':
          description: Candidate not found
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

    delete:
      summary: Delete candidate
      tags: [Admin Candidates]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204':
          description: Candidate deleted
        '404':
          description: Candidate not found
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

  /api/admin/candidates/{id}/notes:
    post:
      summary: Add candidate note
      tags: [Admin Candidates]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [note]
              properties:
                note: { type: string }
                type: { type: string, enum: ['general', 'warning', 'important'] }
      responses:
        '201':
          description: Note added
        '400':
          description: Invalid input
        '404':
          description: Candidate not found
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

    get:
      summary: Get candidate notes
      tags: [Admin Candidates]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Candidate notes
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/CandidateNote' }
                  timestamp: { type: string, format: date-time }
        '404':
          description: Candidate not found
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

  # Payment Management
  /api/admin/payments:
    get:
      summary: Get payments list
      tags: [Admin Payments]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: limit
          schema: { type: integer, default: 50 }
        - in: query
          name: offset
          schema: { type: integer, default: 0 }
        - in: query
          name: status
          schema: { type: string }
        - in: query
          name: purpose
          schema: { $ref: '#/components/schemas/PaymentPurpose' }
        - in: query
          name: session
          schema: { type: string }
      responses:
        '200':
          description: Payments list
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: object
                    properties:
                      payments:
                        type: array
                        items: { $ref: '#/components/schemas/PaymentAdminView' }
                      total: { type: integer }
                  timestamp: { type: string, format: date-time }
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

  /api/admin/payments/types:
    get:
      summary: Get payment types
      tags: [Admin Payments]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Payment types
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/PaymentType' }
                  timestamp: { type: string, format: date-time }
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

    post:
      summary: Create payment type
      tags: [Admin Payments]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, code, amount, currency, session]
              properties:
                name: { type: string }
                code: { type: string }
                description: { type: string }
                amount: { type: number, format: float }
                currency: { type: string, default: 'NGN' }
                session: { type: string }
                isActive: { type: boolean, default: true }
      responses:
        '201':
          description: Payment type created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentType'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

  /api/admin/payments/types/{id}:
    put:
      summary: Update payment type
      tags: [Admin Payments]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                code: { type: string }
                description: { type: string }
                amount: { type: number, format: float }
                currency: { type: string }
                session: { type: string }
                isActive: { type: boolean }
      responses:
        '200':
          description: Payment type updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentType'
        '400':
          description: Invalid input
        '404':
          description: Payment type not found
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

    delete:
      summary: Delete payment type
      tags: [Admin Payments]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204':
          description: Payment type deleted
        '404':
          description: Payment type not found
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

  /api/admin/payments/{id}:
    get:
      summary: Get payment details
      tags: [Admin Payments]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Payment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentAdminView'
        '404':
          description: Payment not found
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

    put:
      summary: Update payment
      tags: [Admin Payments]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status: { $ref: '#/components/schemas/PaymentStatus' }
                notes: { type: string }
      responses:
        '200':
          description: Payment updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentAdminView'
        '400':
          description: Invalid input
        '404':
          description: Payment not found
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

  /api/admin/payments/{id}/reconcile:
    post:
      summary: Reconcile payment
      tags: [Admin Payments]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [action]
              properties:
                action: { type: string, enum: ['approve', 'reject', 'hold'] }
                notes: { type: string }
      responses:
        '200':
          description: Payment reconciled
        '400':
          description: Invalid input
        '404':
          description: Payment not found
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

  /api/admin/payments/disputes:
    get:
      summary: Get payment disputes
      tags: [Admin Payments]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: limit
          schema: { type: integer, default: 50 }
        - in: query
          name: offset
          schema: { type: integer, default: 0 }
        - in: query
          name: status
          schema: { type: string }
      responses:
        '200':
          description: Payment disputes
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/PaymentDispute' }
                  total: { type: integer }
                  timestamp: { type: string, format: date-time }
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

  /api/admin/payments/disputes/{id}:
    put:
      summary: Update payment dispute
      tags: [Admin Payments]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status: { type: string, enum: ['resolved', 'escalated', 'closed'] }
                resolution: { type: string }
                notes: { type: string }
      responses:
        '200':
          description: Dispute updated
        '400':
          description: Invalid input
        '404':
          description: Dispute not found
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

  # Admissions Management
  /api/admin/admissions:
    get:
      summary: Get admissions list
      tags: [Admin Admissions]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: limit
          schema: { type: integer, default: 50 }
        - in: query
          name: offset
          schema: { type: integer, default: 0 }
        - in: query
          name: decision
          schema: { type: string, enum: ['pending', 'admitted', 'rejected'] }
        - in: query
          name: session
          schema: { type: string }
      responses:
        '200':
          description: Admissions list
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: object
                    properties:
                      decisions:
                        type: array
                        items: { $ref: '#/components/schemas/AdmissionDecision' }
                      total: { type: integer }
                  timestamp: { type: string, format: date-time }
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

  /api/admin/admissions/{id}:
    put:
      summary: Update admission decision
      tags: [Admin Admissions]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [decision]
              properties:
                decision: { type: string, enum: ['pending', 'admitted', 'rejected'] }
                notes: { type: string }
                decided_at: { type: string, format: date-time }
      responses:
        '200':
          description: Admission decision updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdmissionDecision'
        '400':
          description: Invalid input
        '404':
          description: Admission not found
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

  /api/admin/admissions/batch:
    post:
      summary: Batch update admissions
      tags: [Admin Admissions]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [candidateIds, decision]
              properties:
                candidateIds:
                  type: array
                  items: { type: string, format: uuid }
                decision: { type: string, enum: ['pending', 'admitted', 'rejected'] }
                notes: { type: string }
      responses:
        '200':
          description: Admissions updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: object
                    properties:
                      success: { type: integer }
                      failed: { type: integer }
                      errors: { type: array, items: { type: string } }
                  timestamp: { type: string, format: date-time }
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

  # Reports and Exports
  /api/admin/reports:
    get:
      summary: Get reports list
      tags: [Admin Reports]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: limit
          schema: { type: integer, default: 50 }
        - in: query
          name: offset
          schema: { type: integer, default: 0 }
        - in: query
          name: type
          schema: { type: string }
        - in: query
          name: status
          schema: { type: string }
      responses:
        '200':
          description: Reports list
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: object
                    properties:
                      jobs:
                        type: array
                        items: { $ref: '#/components/schemas/ReportJob' }
                      total: { type: integer }
                  timestamp: { type: string, format: date-time }
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

    post:
      summary: Generate new report
      tags: [Admin Reports]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [type]
              properties:
                type:
                  type: string
                  enum:
                    [
                      'daily-summary',
                      'candidate-summary',
                      'payment-summary',
                      'admission-summary',
                      'audit-summary',
                    ]
                startDate: { type: string, format: date }
                endDate: { type: string, format: date }
                format: { type: string, enum: ['pdf', 'excel', 'csv'], default: 'pdf' }
                parameters: { type: object }
      responses:
        '201':
          description: Report generation started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportJob'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

  /api/admin/reports/{id}:
    get:
      summary: Get report details
      tags: [Admin Reports]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Report details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportJob'
        '404':
          description: Report not found
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

  /api/admin/reports/{id}/download:
    get:
      summary: Download generated report
      tags: [Admin Reports]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Report file
          content:
            application/pdf:
              schema:
                type: string
                format: binary
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
            text/csv:
              schema:
                type: string
        '404':
          description: Report not found
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

  # Audit Logs
  /api/admin/audit-logs:
    get:
      summary: Get audit logs
      tags: [Admin Audit]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: limit
          schema: { type: integer, default: 50 }
        - in: query
          name: offset
          schema: { type: integer, default: 0 }
        - in: query
          name: actor
          schema: { type: string }
        - in: query
          name: action
          schema: { type: string }
        - in: query
          name: resource
          schema: { type: string }
        - in: query
          name: startDate
          schema: { type: string, format: date }
        - in: query
          name: endDate
          schema: { type: string, format: date }
      responses:
        '200':
          description: Audit logs
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: object
                    properties:
                      logs:
                        type: array
                        items: { $ref: '#/components/schemas/AuditLog' }
                      total: { type: integer }
                  timestamp: { type: string, format: date-time }
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

  /api/admin/audit-logs/summary:
    get:
      summary: Get audit logs summary
      tags: [Admin Audit]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: startDate
          schema: { type: string, format: date }
        - in: query
          name: endDate
          schema: { type: string, format: date }
      responses:
        '200':
          description: Audit summary
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: object
                    properties:
                      totalActions: { type: integer }
                      actionsByType: { type: object }
                      actionsByUser: { type: object }
                      actionsByResource: { type: object }
                  timestamp: { type: string, format: date-time }
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

  /api/admin/audit-logs/export:
    get:
      summary: Export audit logs
      tags: [Admin Audit]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: startDate
          schema: { type: string, format: date }
        - in: query
          name: endDate
          schema: { type: string, format: date }
        - in: query
          name: format
          schema: { type: string, enum: ['csv', 'excel'], default: 'csv' }
      responses:
        '200':
          description: Audit logs export
          content:
            text/csv:
              schema:
                type: string
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

  # Monitoring and Observability Endpoints
  /api/admin/metrics:
    get:
      summary: Get system performance metrics
      description: Retrieve comprehensive system metrics including HTTP requests, database operations, and performance data
      tags: [Admin Monitoring]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: System metrics
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: object
                    properties:
                      counters: { type: object }
                      gauges: { type: object }
                      histograms: { type: object }
                      uptime: { type: number }
                      timestamp: { type: string, format: date-time }
                  timestamp: { type: string, format: date-time }
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

  /api/admin/cache-stats:
    get:
      summary: Get cache performance statistics
      description: Retrieve cache performance metrics including hit rates, sizes, and eviction statistics
      tags: [Admin Monitoring]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Cache statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: object
                    properties:
                      caches: { type: object }
                      globalStats:
                        type: object
                        properties:
                          totalHits: { type: number }
                          totalMisses: { type: number }
                          totalSets: { type: number }
                          totalEvictions: { type: number }
                          hitRate: { type: number }
                  timestamp: { type: string, format: date-time }
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

  /api/admin/rate-limit-stats:
    get:
      summary: Get rate limiting statistics
      description: Retrieve current rate limiting violations and statistics
      tags: [Admin Monitoring]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Rate limit statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: object
                    properties:
                      totalViolations: { type: number }
                      violationsByIP: { type: object }
                      timestamp: { type: string, format: date-time }
                  timestamp: { type: string, format: date-time }
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

  /api/health/detailed:
    get:
      summary: Get detailed system health status
      description: Retrieve comprehensive system health including memory usage, request statistics, and performance metrics
      tags: [Health]
      responses:
        '200':
          description: Detailed health status
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: object
                    properties:
                      status: { type: string }
                      uptime: { type: number }
                      memory:
                        type: object
                        properties:
                          heapUsed: { type: string }
                          heapTotal: { type: string }
                          external: { type: string }
                          rss: { type: string }
                      requests:
                        type: object
                        properties:
                          total: { type: number }
                          active: { type: number }
                          errors: { type: number }
                      database:
                        type: object
                        properties:
                          queries: { type: number }
                          errors: { type: number }
                      payments:
                        type: object
                        properties:
                          events: { type: number }
                          errors: { type: number }
                      timestamp: { type: string, format: date-time }
                  timestamp: { type: string, format: date-time }
        '500':
          description: Internal server error

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Candidate Module Schemas
    Candidate:
      type: object
      properties:
        id: { type: string, format: uuid }
        jambRegNo: { type: string }
        username: { type: string }
        email: { type: string }
        phone: { type: string }
        programChoice1: { type: string }
        programChoice2: { type: string }
        programChoice3: { type: string }
        jambScore: { type: number }
        stateOfOrigin: { type: string }
        applicationStatus: { type: string }
        paymentStatus: { type: string }
        admissionStatus: { type: string }
        profile:
          $ref: '#/components/schemas/CandidateProfile'
        application:
          $ref: '#/components/schemas/CandidateApplication'
        admission:
          $ref: '#/components/schemas/CandidateAdmission'
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    CandidateProfile:
      type: object
      properties:
        surname: { type: string }
        firstname: { type: string }
        othernames: { type: string }
        gender: { type: string }
        dateOfBirth: { type: string, format: date }
        address: { type: string }
        state: { type: string }
        lga: { type: string }
        city: { type: string }
        nationality: { type: string }
        maritalStatus: { type: string }

    CandidateApplication:
      type: object
      properties:
        id: { type: string, format: uuid }
        session: { type: string }
        programmeCode: { type: string }
        departmentCode: { type: string }
        status: { type: string }

    CandidateAdmission:
      type: object
      properties:
        id: { type: string, format: uuid }
        decision: { type: string }
        decidedAt: { type: string, format: date-time }
        notes: { type: string }

    CandidateStatus:
      type: object
      properties:
        candidateId: { type: string, format: uuid }
        jambRegNo: { type: string }
        username: { type: string }
        email: { type: string }
        programChoice1: { type: string }
        programChoice2: { type: string }
        programChoice3: { type: string }
        jambScore: { type: number }
        stateOfOrigin: { type: string }
        applicationStatus: { type: string }
        paymentStatus: { type: string }
        admissionStatus: { type: string }
        payments:
          type: array
          items:
            type: object
            properties:
              purpose: { type: string }
              amount: { type: number }
              status: { type: string }
              date: { type: string, format: date-time }
        documents:
          type: array
          items:
            type: object
            properties:
              type: { type: string }
              status: { type: string }
              uploadedAt: { type: string, format: date-time }
        education:
          type: array
          items:
            type: object
            properties:
              level: { type: string }
              examType: { type: string }
              year: { type: string }
              school: { type: string }
        createdAt: { type: string, format: date-time }

    RegistrationFormData:
      type: object
      properties:
        candidate: { $ref: '#/components/schemas/Candidate' }
        profile: { $ref: '#/components/schemas/CandidateProfile' }
        nextOfKin:
          type: object
          properties:
            name: { type: string }
            relation: { type: string }
            phone: { type: string }
            email: { type: string }
            address: { type: string }
        sponsor:
          type: object
          properties:
            name: { type: string }
            phone: { type: string }
            email: { type: string }
            address: { type: string }
        education:
          type: array
          items:
            type: object
            properties:
              level: { type: string }
              examType: { type: string }
              year: { type: string }
              school: { type: string }
        application: { $ref: '#/components/schemas/CandidateApplication' }

    AdmissionStatus:
      type: object
      properties:
        status: { type: string }
        decisionDate: { type: string, format: date-time }
        remarks: { type: string }
        applicationId: { type: string, format: uuid }

    MatriculationDetails:
      type: object
      properties:
        matricNo: { type: string }
        departmentCode: { type: string }
        session: { type: string }
        matriculatedAt: { type: string, format: date-time }

    MigrationStatus:
      type: object
      properties:
        status: { type: string }
        attempts: { type: number }
        lastError: { type: string }
        pushedAt: { type: string, format: date-time }
        createdAt: { type: string, format: date-time }

    CandidateDashboard:
      type: object
      properties:
        profile: { $ref: '#/components/schemas/CandidateProfile' }
        nextOfKin:
          type: object
          properties:
            name: { type: string }
            relation: { type: string }
            phone: { type: string }
            email: { type: string }
            address: { type: string }
        sponsor:
          type: object
          properties:
            name: { type: string }
            phone: { type: string }
            email: { type: string }
            address: { type: string }
        educationRecords:
          type: array
          items:
            type: object
            properties:
              level: { type: string }
              examType: { type: string }
              year: { type: string }
              school: { type: string }
        uploads:
          type: array
          items:
            type: object
            properties:
              type: { type: string }
              s3Url: { type: string }
              scanStatus: { type: string }
        application: { $ref: '#/components/schemas/CandidateApplication' }
        payments:
          type: array
          items:
            type: object
            properties:
              purpose: { type: string }
              amount: { type: number }
              status: { type: string }
              createdAt: { type: string, format: date-time }
        completionStatus:
          type: object
          properties:
            candidate: { type: boolean }
            nextOfKin: { type: boolean }
            sponsor: { type: boolean }
            education: { type: boolean }
            documents: { type: boolean }
            overall: { type: number }

    ProfileCompletionStatus:
      type: object
      properties:
        candidate: { type: boolean }
        nextOfKin: { type: boolean }
        sponsor: { type: boolean }
        education: { type: boolean }
        documents: { type: boolean }
        overall: { type: number }

    # Existing Schemas
    PaymentPurpose:
      type: string
      enum: [post_utme, acceptance, school_fee]

    PaymentProvider:
      type: string
      enum: [remita, paystack, flutterwave]

    PaymentStatus:
      type: string
      enum: [initiated, pending, success, failed, reconciled]

    DecisionStatus:
      type: string
      enum: [pending, admitted, rejected]

    UploadType:
      type: string
      enum: [passport, ssce, alevel, transcript, utme_result, other]

    JambPrelistMinimal:
      type: object
      properties:
        jambRegNo: { type: string }
        surname: { type: string }
        firstname: { type: string }
        othernames: { type: string }
        programmeCode: { type: string }
        departmentCode: { type: string }
        session: { type: string }

    AuthTokens:
      type: object
      properties:
        accessToken: { type: string }
        refreshToken: { type: string }
        tempPasswordFlag: { type: boolean }

    Me:
      type: object
      properties:
        candidate:
          $ref: '#/components/schemas/Candidate'
        profile:
          $ref: '#/components/schemas/Profile'
        application:
          $ref: '#/components/schemas/Application'
        completion:
          type: object
          properties:
            biodata: { type: boolean }
            education: { type: boolean }
            nokSponsor: { type: boolean }
            printedForm: { type: boolean }

    Profile:
      type: object
      properties:
        candidateId: { type: string, format: uuid }
        surname: { type: string }
        firstname: { type: string }
        othernames: { type: string }
        gender: { type: string }
        dob: { type: string, format: date }
        address: { type: string }
        state: { type: string }
        lga: { type: string }
        city: { type: string }
        nationality: { type: string }
        maritalStatus: { type: string }

    ProfileUpdate:
      allOf:
        - $ref: '#/components/schemas/Profile'

    Application:
      type: object
      properties:
        id: { type: string, format: uuid }
        session: { type: string }
        programmeCode: { type: string }
        departmentCode: { type: string }
        status: { $ref: '#/components/schemas/DecisionStatus' }

    EducationRecordCreate:
      type: object
      required: [levelType]
      properties:
        levelType: { type: string }
        examType: { type: string }
        year: { type: string }
        schoolName: { type: string }
        certificateNo: { type: string }
        gradeSummary: { type: string }

    EducationRecordUpdate:
      allOf:
        - $ref: '#/components/schemas/EducationRecordCreate'

    EducationRecord:
      allOf:
        - $ref: '#/components/schemas/EducationRecordCreate'
        - type: object
          properties:
            id: { type: string, format: uuid }
            candidateId: { type: string, format: uuid }

    Upload:
      type: object
      properties:
        id: { type: string, format: uuid }
        type: { $ref: '#/components/schemas/UploadType' }
        s3Url: { type: string }
        checksumSha256: { type: string }
        sizeBytes: { type: integer }
        mimeType: { type: string }
        scanStatus:
          type: string
          enum: [pending, clean, infected, failed]
        createdAt: { type: string, format: date-time }

    RegistrationPreview:
      type: object
      properties:
        biodata: { $ref: '#/components/schemas/Profile' }
        education:
          type: array
          items: { $ref: '#/components/schemas/EducationRecord' }
        nok:
          type: array
          items:
            type: object
            properties:
              name: { type: string }
              relation: { type: string }
              phone: { type: string }
              email: { type: string }
              address: { type: string }
        sponsor:
          type: array
          items:
            type: object
            properties:
              name: { type: string }
              phone: { type: string }
              email: { type: string }
              address: { type: string }

    DashboardSummary:
      type: object
      properties:
        passportUrl: { type: string }
        name: { type: string }
        programme: { type: string }
        department: { type: string }
        admissionStatus: { $ref: '#/components/schemas/DecisionStatus' }
        matricNo: { type: string, nullable: true }
        payments:
          type: array
          items: { $ref: '#/components/schemas/Payment' }

    PaymentInitResponse:
      type: object
      properties:
        paymentId: { type: string, format: uuid }
        provider: { $ref: '#/components/schemas/PaymentProvider' }
        providerRef: { type: string }
        redirectUrl: { type: string }
        status: { $ref: '#/components/schemas/PaymentStatus' }

    Payment:
      type: object
      properties:
        id: { type: string, format: uuid }
        purpose: { $ref: '#/components/schemas/PaymentPurpose' }
        provider: { $ref: '#/components/schemas/PaymentProvider' }
        providerRef: { type: string }
        amount: { type: number }
        currency: { type: string }
        status: { $ref: '#/components/schemas/PaymentStatus' }
        createdAt: { type: string, format: date-time }

    CandidateAdminView:
      type: object
      properties:
        id: { type: string, format: uuid }
        jambRegNo: { type: string }
        name: { type: string }
        session: { type: string }
        programmeCode: { type: string }
        departmentCode: { type: string }
        admissionStatus: { $ref: '#/components/schemas/DecisionStatus' }
        payments:
          type: array
          items: { $ref: '#/components/schemas/Payment' }

    Student:
      type: object
      properties:
        id: { type: string, format: uuid }
        candidateId: { type: string, format: uuid }
        matricNo: { type: string }
        deptCode: { type: string }
        session: { type: string }

    # ============================================
    # Admin Portal Schemas
    # ============================================

    AdminUser:
      type: object
      properties:
        id: { type: string, format: uuid }
        username: { type: string }
        email: { type: string }
        role:
          {
            type: string,
            enum: [super_admin, admissions_officer, finance_officer, registrar, viewer],
          }
        isActive: { type: boolean }
        lastLoginAt: { type: string, format: date-time }
        createdAt: { type: string, format: date-time }

    AdminLoginResponse:
      type: object
      properties:
        success: { type: boolean }
        data:
          type: object
          properties:
            accessToken: { type: string }
            refreshToken: { type: string }
            expiresIn: { type: integer }
            tokenType: { type: string }
        user: { $ref: '#/components/schemas/AdminUser' }
        timestamp: { type: string, format: date-time }

    AdminAuthTokens:
      type: object
      properties:
        accessToken: { type: string }
        refreshToken: { type: string }
        expiresIn: { type: integer }
        tokenType: { type: string }

    AdminDashboardSummary:
      type: object
      properties:
        totalCandidates: { type: integer }
        pendingApplications: { type: integer }
        totalPayments: { type: integer }
        totalAdmissions: { type: integer }
        recentActivity:
          type: array
          items:
            type: object
            properties:
              action: { type: string }
              timestamp: { type: string, format: date-time }
              adminUser: { type: string }

    AdminAnalytics:
      type: object
      properties:
        candidatesByStatus:
          type: object
          additionalProperties: { type: integer }
        paymentsByMonth:
          type: object
          additionalProperties: { type: number }
        admissionsByProgram:
          type: object
          additionalProperties: { type: integer }
        applicationTrends:
          type: array
          items:
            type: object
            properties:
              date: { type: string, format: date }
              applications: { type: integer }
              payments: { type: integer }
        topPerformingPrograms:
          type: array
          items:
            type: object
            properties:
              program: { type: string }
              applications: { type: integer }
              conversionRate: { type: number }

    AdminRole:
      type: string
      enum: [super_admin, admissions_officer, finance_officer, registrar, viewer, data_analyst]

    AdminPermission:
      type: object
      properties:
        id: { type: string, format: uuid }
        role: { $ref: '#/components/schemas/AdminRole' }
        resource: { type: string }
        action: { type: string }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    AdminHealthStatus:
      type: object
      properties:
        success: { type: boolean }
        data:
          type: object
          properties:
            module: { type: string }
            status: { type: string }
            timestamp: { type: string, format: date-time }
            version: { type: string }

    PrelistBatch:
      type: object
      properties:
        id: { type: string, format: uuid }
        filename: { type: string }
        totalRecords: { type: integer }
        processedRecords: { type: integer }
        failedRecords: { type: integer }
        status: { type: string, enum: ['processing', 'completed', 'failed'] }
        uploadedBy: { type: string, format: uuid }
        uploadedAt: { type: string, format: date-time }
        completedAt: { type: string, format: date-time }

    PrelistError:
      type: object
      properties:
        id: { type: string, format: uuid }
        batchId: { type: string, format: uuid }
        rowNumber: { type: integer }
        field: { type: string }
        value: { type: string }
        error: { type: string }
        createdAt: { type: string, format: date-time }

    # CandidateAdminView schema is defined above at line 2157

    CandidateNote:
      type: object
      properties:
        id: { type: string, format: uuid }
        candidateId: { type: string, format: uuid }
        note: { type: string }
        type: { type: string, enum: ['general', 'warning', 'important'] }
        adminUserId: { type: string, format: uuid }
        createdAt: { type: string, format: date-time }

    PaymentDispute:
      type: object
      properties:
        id: { type: string, format: uuid }
        paymentId: { type: string, format: uuid }
        reason: { type: string }
        status: { type: string, enum: ['open', 'resolved', 'escalated', 'closed'] }
        resolution: { type: string }
        notes: { type: string }
        createdBy: { type: string, format: uuid }
        createdAt: { type: string, format: date-time }
        resolvedAt: { type: string, format: date-time }

    ReportJob:
      type: object
      properties:
        id: { type: string, format: uuid }
        type: { type: string }
        parameters: { type: object }
        status: { type: string, enum: ['queued', 'processing', 'completed', 'failed'] }
        fileUrl: { type: string }
        errorMessage: { type: string }
        createdBy: { type: string, format: uuid }
        createdAt: { type: string, format: date-time }
        completedAt: { type: string, format: date-time }

    AuditLog:
      type: object
      properties:
        id: { type: string, format: uuid }
        adminUserId: { type: string, format: uuid }
        action: { type: string }
        resource: { type: string }
        resourceId: { type: string, format: uuid }
        details: { type: object }
        ipAddress: { type: string }
        userAgent: { type: string }
        createdAt: { type: string, format: date-time }

    JambPrelistRecord:
      type: object
      properties:
        jambRegNo: { type: string }
        surname: { type: string }
        firstname: { type: string }
        othernames: { type: string }
        gender: { type: string }
        programmeCode: { type: string }
        departmentCode: { type: string }
        faculty: { type: string }
        stateOfOrigin: { type: string }
        lgaOfOrigin: { type: string }
        email: { type: string }
        phone: { type: string }
        utmeScore: { type: integer }
        session: { type: string }

    PrelistUploadResponse:
      type: object
      properties:
        batchId: { type: string, format: uuid }
        filename: { type: string }
        totalRecords: { type: integer }
        status: { type: string }
        message: { type: string }

    PaymentType:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        code: { type: string }
        description: { type: string }
        amount: { type: number }
        currency: { type: string }
        isActive: { type: boolean }
        session: { type: string }
        dueDate: { type: string, format: date }

    PaymentAdminView:
      type: object
      properties:
        id: { type: string, format: uuid }
        candidateId: { type: string, format: uuid }

    # New Candidate Registration Flow Schemas
    JambVerificationResponse:
      type: object
      properties:
        exists: { type: boolean }
        biodata: { $ref: '#/components/schemas/JambPrelistRecord' }
        requiresEmail: { type: boolean }
        requiresPhone: { type: boolean }
        message: { type: string }

    ContactUpdateResponse:
      type: object
      properties:
        success: { type: boolean }
        message: { type: string }
        updatedFields:
          type: array
          items: { type: string }

    NextStepResponse:
      type: object
      properties:
        currentStep:
          { type: string, enum: ['biodata', 'education', 'nextOfKin', 'sponsor', 'complete'] }
        completionPercentage: { type: integer, minimum: 0, maximum: 100 }
        nextStep: { type: string }
        requiredFields:
          type: array
          items: { type: string }
        message: { type: string }
        purpose: { $ref: '#/components/schemas/PaymentPurpose' }
        provider: { $ref: '#/components/schemas/PaymentProvider' }
        amount: { type: number }
        currency: { type: string }
        status: { $ref: '#/components/schemas/PaymentStatus' }
        level: { type: string }
        session: { type: string }
        createdAt: { type: string, format: date-time }

    AdmissionDecision:
      type: object
      properties:
        id: { type: string, format: uuid }
        jambRegNo: { type: string }
        decision: { type: string, enum: ['pending', 'admitted', 'rejected'] }
        notes: { type: string }
        decidedBy: { type: string, format: uuid }
        decidedAt: { type: string, format: date-time }
